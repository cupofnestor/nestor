package com.nestor.sxc.imap{	import flash.events.Event;	import flash.events.TimerEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.DatagramSocketDataEvent;	import flash.utils.Timer;		import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.net.DatagramSocket;	import flash.utils.ByteArray;	public class UDPController extends MovieClip {		public var copTop:Number=122;		public var brakeVal:Number=0;		public var copTime:Number=400;		public var stopTop:Number=120;		public var stopTime:Number=2000;		public var offset:Number = 75;		public var ease:Number = 88;		public var msg:String;		private var udpHost:String;		private var udpSendPort:int;		private var udpRecPort:int;		public var speedLimit:Number = 35;		private var lastW:Array = new Array();		private var avgI:Number = 4;		public var avg:Number = 0;		//Setup two sockets, one for send, one for receive.		private var outlet:DatagramSocket = new DatagramSocket();		private var inlet:DatagramSocket = new DatagramSocket();		public var deltaWheel:Number; //Wheel Speed and direction.  -30 ~ 30		public var wheelValue:Number=0;		public var OLEDimgIDs:Array = new Array(0,0,0,0);		private var stopD:Number=0;		/*		private var button1:Array= [ "oled_blankRed.jpg", "oled_SG_up.jpg", "oled_SG_down.jpg", "oled_SGc_up.jpg", "oled_SGc_down.jpg", "oled_SGc1_up.jpg", "oled_SGc1_down.jpg", "oled_SGe1_up.jpg", "oled_SGe1_down.jpg", "oled_SGs1_up.jpg", "oled_SGs1_down.jpg", "oled_SGa1_up.jpg", "oled_SGa1_down.jpg", "oled_RRa1_up.jpg", "oled_RRa1_down.jpg", "oled_RRb1_up.jpg", "oled_RRb1_down.jpg", "oled_RRc1_up.jpg", "oled_RRc1_down.jpg", "oled_RRd1_up.jpg", "oled_RRd1_down.jpg", "oled_DD3_up.jpg", "oled_DD3_down.jpg", "oled_DD3a1_up.jpg", "oled_DD3a1_down.jpg", "oled_DD3b1_up.jpg", "oled_DD3b1_down.jpg", "oled_DD4a1_up.jpg", "oled_DD4a1_down.jpg", "oled_DD4b1_up.jpg", "oled_DD4b1_down.jpg", "oled_DD4c1_up.jpg", "oled_DD4c1_down.jpg", "oled_DD6a1_up.jpg", "oled_DD6a1_down.jpg", "oled_DD6b1_up.jpg", "oled_DD6b1_down.jpg", "oled_DDpa1_up.jpg", "oled_DDpa1_down.jpg", "oled_DDpb1_up.jpg", "oled_DDpb1_down.jpg"];		private var button2:Array= [ "oled_blankYellow.jpg", "oled_RR_up.jpg", "oled_RR_down.jpg", "oled_SGe_up.jpg", "oled_SGe_down.jpg", "oled_SGc2_up.jpg", "oled_SGc2_down.jpg", "oled_SGe2_up.jpg", "oled_SGe2_down.jpg", "oled_SGs2_up.jpg", "oled_SGs2_down.jpg", "oled_SGa2_up.jpg", "oled_SGa2_down.jpg", "oled_RRa2_up.jpg", "oled_RRa2_down.jpg", "oled_RRb2_up.jpg", "oled_RRb2_down.jpg", "oled_RRc2_up.jpg", "oled_RRc2_down.jpg", "oled_RRd2_up.jpg", "oled_RRd2_down.jpg", "oled_DD3a2_up.jpg", "oled_DD3a2_down.jpg", "oled_DD3b2_up.jpg", "oled_DD3b2_down.jpg", "oled_DD4_up.jpg", "oled_DD4_down.jpg", "oled_DD4a2_up.jpg", "oled_DD4a2_down.jpg", "oled_DD4b2_up.jpg", "oled_DD4b2_down.jpg", "oled_DD4c2_up.jpg", "oled_DD4c2_down.jpg", "oled_DD6a2_up.jpg", "oled_DD6a2_down.jpg", "oled_DD6b2_up.jpg", "oled_DD6b2_down.jpg", "oled_DDpa2_up.jpg", "oled_DDpa2_down.jpg", "oled_DDpb2_up.jpg", "oled_DDpb2_down.jpg"];		private var button3:Array= ["oled_blankBlue.jpg", "oled_DD_up.jpg", "oled_DD_down.jpg", "oled_SGs_up.jpg", "oled_SGs_down.jpg", "oled_SGc3_up.jpg", "oled_SGc3_down.jpg", "oled_SGe3_up.jpg", "oled_SGe3_down.jpg", "oled_SGs3_up.jpg", "oled_SGs3_down.jpg", "oled_SGa3_up.jpg", "oled_SGa3_down.jpg", "oled_RRa3_up.jpg", "oled_RRa3_down.jpg", "oled_RRb3_up.jpg", "oled_RRb3_down.jpg", "oled_RRc3_up.jpg", "oled_RRc3_down.jpg", "oled_RRd3_up.jpg", "oled_RRd3_down.jpg", "oled_DD_up.jpg", "oled_DD_down.jpg", "oled_DD6_up.jpg", "oled_DD6_down.jpg", "oled_DD3a3_up.jpg", "oled_DD3a3_down.jpg", "oled_DD3b3_up.jpg", "oled_DD3b3_down.jpg", "oled_DD4a3_up.jpg", "oled_DD4a3_down.jpg", "oled_DD4c3_up.jpg", "oled_DD4c3_down.jpg", "oled_DD6a3_up.jpg", "oled_DD6a3_down.jpg", "oled_DD6b3_up.jpg", "oled_DD6b3_down.jpg", "oled_DDpa3_up.jpg", "oled_DDpa3_down.jpg", "oled_DDpb3_up.jpg", "oled_DDpb3_down.jpg"];		private var button4:Array= ["oled_blankGreen.jpg",  "oled_SGa_up.jpg", "oled_SGa_down.jpg", "oled_SGc4_up.jpg", "oled_SGc4_down.jpg", "oled_SGe4_up.jpg", "oled_SGe4_down.jpg", "oled_SGs4_up.jpg", "oled_SGs4_down.jpg", "oled_RRa4_up.jpg", "oled_RRa4_down.jpg", "oled_RRb4_up.jpg", "oled_RRb4_down.jpg", "oled_RRc4_up.jpg", "oled_RRc4_down.jpg", "oled_RRd4_up.jpg", "oled_RRd4_down.jpg", "oled_DDp_up.jpg", "oled_DDp_down.jpg", "oled_DD3a4_up.jpg", "oled_DD3a4_down.jpg", "oled_DD3b4_up.jpg", "oled_DD3b4_down.jpg", "oled_DD4a4_up.jpg", "oled_DD4a4_down.jpg", "oled_DD4c4_up.jpg", "oled_DD4c4_down.jpg", "oled_DD6a4_up.jpg", "oled_DD6a4_down.jpg", "oled_DD6b4_up.jpg", "oled_DD6b4_down.jpg", "oled_DDpb4_up.jpg", "oled_DDpb4_down.jpg"];			*/		public function UDPController(host:String, tx:int, rx:int) {						udpHost = host; //Please set these with a config file			udpSendPort = tx;    //Please set these with a config file			udpRecPort = rx;    //Please set these with a config file			setBrake(offset);			addEventListener("wheelChanged",cop);			initUDP();		} 		public function setBrake(drag:Number):void {			//trace("setBrake( "+drag+" )");						var dragStr:String=String(int(drag));						if (drag<10)			{				dragStr="00"+dragStr;			}			else if (drag<100)			{				dragStr="0"+dragStr;			}			else			{				dragStr=dragStr;			}						var wheelCmd:String = "brake;"+dragStr;			sendCmd(wheelCmd);			brakeVal=drag;		}				public function initUDP():void {			//trace("initUDP");			inlet.addEventListener(DatagramSocketDataEvent.DATA, dataHandler);       		inlet.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);      		inlet.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);       		inlet.bind(udpRecPort, "0.0.0.0");						//datagramSocket.receive();			inlet.receive();			trace("UDP Inlet: Bound to "+udpRecPort+", waiting for connection");							}				public function setLed(LEDState:Number):void {			//trace("setLed( LEDState: "+LEDState+" )");			var ledCmd:String = "led;"+LEDState.toString();			sendCmd(ledCmd);		}				public function setYear(Year:Number):void {			//trace("setYear( Year: "+Year+" )");			var yrCmd:String = "year;"+Year.toString();			sendCmd(yrCmd);		}				public function setImg(olId:Number,imgId:Number):void {			var idStr:String = String(imgId);						if(imgId < 10){				//trace("Is less than ten");				idStr = "0"+idStr;				//trace("StringID="+idStr);			}						//trace("setImg( olId: "+olId+" imgId: "+imgId+" )");			OLEDimgIDs[olId] = imgId;			var imgCmd:String = "oled;"+(olId+1).toString()+";"+idStr;			sendCmd(imgCmd);		}								//accepts a (hopefully)well-formed message and sends it as UTF Bytes, appending EOL char.		public function sendCmd(cmd:String):void {			trace("***>>>Sending "+cmd);			var EOL:String = "\n"; //Newline			//var EOL:String = "\r"; //Carriage Return			//trace("Sending :"+cmd+"on "+udpHost+":"+udpSendPort);			var bytes:ByteArray=new ByteArray();			bytes.writeUTFBytes(cmd+EOL);			outlet.send(bytes,0,0,udpHost,udpSendPort);		}										private function dataHandler(e:DatagramSocketDataEvent) : void {			//trace("***>>>udpEvent(  "+e.data+"  )");			var dEOL:String="\n"			//var dEOL:String="\r"				//trace(e.data);				msg = e.data.readUTFBytes(e.data.length);				msg = msg.split(dEOL).join("");				dispatchEvent(new Event("hello"));				var cmd:Array = msg.split(";");  //Field separator for messages is ";"												switch (cmd[0]) {//sort commands by "domain"									case "SW":					swHandler(cmd[1], cmd[2]);					break;										case "wheel":					wheelHandler(cmd[1])										break;									}		}									private function IOErrorHandler(event:IOErrorEvent) : void {			//trace("IOErrorHandler( "+event+" )");			//trace(event);		}				private function securityErrorHandler(event:SecurityErrorEvent) : void {			trace("securityErrorHandler( "+event+" )");			//trace(event);		}						private function wheelHandler(w:String){			//trace("Wheel Value = "+deltaWheel);			deltaWheel=int(w);			//trace(w);			wheelValue+=deltaWheel;			trace("Direction: "+checkDirection());			dispatchEvent(new Event("wheelChanged",false,true));		}				private function cop(w:Event):void		{			avg=0;			var end:Number = lastW.push(deltaWheel);		    //trace("End ="+end+", array: "+lastW);			if(end > avgI){				lastW.shift();				//trace("shifted, array: "+lastW);			}									for each(var i:Number in lastW){				avg+=Math.abs(i);			}			avg/=avgI;			//trace("VAL="+deltaWheel+" AVG="+avg);			trace(deltaWheel+","+avg);			dispatchEvent(new Event("wheelAvg"));			if(avg>speedLimit)			{				lastW.splice(0,lastW.length);				bump(copTop,copTime);			}					}						public function checkDirection():Number		{						if (deltaWheel == 0) return 0;			else return (deltaWheel>0)?1:-1;		}				public function stopLeft():void		{			trace("***>>>StopLeft");			stopD = -1;			removeEventListener("wheelChanged",cop);			addEventListener("wheelChanged", stopWheel);			stopBump();			}		public function stopRight():void		{			trace("***>>>StopRight");			stopD = 1;			removeEventListener("wheelChanged",cop);			addEventListener("wheelChanged", stopWheel);			stopBump();								}				private function stopWheel(e:Event):void		{			trace("***>>>StopWheel Hit, Direction = "+checkDirection()+"  StopD = "+stopD);			var direx:Number = checkDirection();			if(direx == stopD || direx == 0) stopBump();			else breakClear();						//(checkDirection() == stopD || checkDirection() == 0 )?stopBump:clearBreak();		}				public function breakClear()		{			trace("***>>>ClearBreak");			setBrake(offset);			addEventListener("wheelChanged",cop);			removeEventListener("wheelChanged", stopWheel);		}				private function stopBump(){			trace("***>>>StopBump");			removeEventListener("wheelChanged", stopWheel);			var r:Function = function(_t:TimerEvent):void			{				if(brakeVal>ease){					trace("***>>>EasingStop");					setBrake(ease);					_t.target.stop();					_t.target.removeEventListener(TimerEvent.TIMER_COMPLETE,r);					addEventListener("wheelChanged", stopWheel);				}				else{					trace("***>>>EasingBreakout");					//	setBrake(offset);					_t.target.stop();					_t.target.removeEventListener(TimerEvent.TIMER_COMPLETE,r);									}			}			var t:Timer=new Timer(stopTime,1);			t.addEventListener(TimerEvent.TIMER_COMPLETE,r);			setBrake(stopTop);			t.start();		}						/*public function stopLeft():void		{			//MovieClip(parent).dataView.appendText(" *** StopLeft ");			trace("StopLeft");			removeEventListener("wheelChanged",cop);			addEventListener("wheelChanged", stopLeftHandler);		}				private function stopLeftHandler(e:Event):void		{			e.stopImmediatePropagation();			if (deltaWheel < 0){				bump(stopTop,stopTime);				trace("Left Extent Pushed, bumping");			}						else{				addEventListener("wheelChanged",cop);				removeEventListener("wheelChanged", stopLeftHandler);			}		}				public function stopRight():void		{			//MovieClip(parent).dataView.appendText(" *** StopRight ");			stopBump(stopTop,stopTime);			trace("Right Extent Reached, bumping");			trace("StopRight");			deltaWheel=0;			removeEventListener("wheelChanged",cop);			addEventListener("wheelChanged", stopRightHandler);		}				private function stopRightHandler(e:Event):void		{			trace("HIT stopRight");			e.stopImmediatePropagation();			if (deltaWheel > 0 && brakeVal < stopTop) 			{				stopBump(stopTop,stopTime);				trace("Right Extent Pushed, bumping");			}			else if (deltaWheel < 0 && brakeVal == ease){				setBrake(offset);				trace("RELEASING")				addEventListener("wheelChanged",cop);				removeEventListener("wheelChanged", stopRightHandler);			}		}				*/				public function bump( _a:Number = 122, _p:Number = 1000){			var r:Function = function(_t:TimerEvent):void			{				setBrake(offset);				_t.target.stop();				_t.target.removeEventListener(TimerEvent.TIMER_COMPLETE,r);			}			var t:Timer=new Timer(_p,1);			t.addEventListener(TimerEvent.TIMER_COMPLETE,r);			setBrake(_a);			t.start();		}				//Parses out the rest of the sw;x;x command		private function swHandler(id:String, swState:String) {			trace("***>>>swHandler( id: "+Number(id)+", swState:"+Number(swState)+")");						//			var btnState:String;    //.substr(0,1) strips hidden line break after first character in btnState string -- param 0 starts at beginning of string and param'1' is how many characters			//Line below should be deprecated, as trailing EOL was dealt with in dataHandler above			//if (swState.substr(0,1)=="0") btnState="Up" else btnState="Down";			var adj:Number = Number(id);						if(adj <= 4){				//adj+=1 //add one for 1-indexed oled Events for Peter				var btnEvent:String="oled"+(adj)+( swState=="0" ? "up" : "down" );				trace("Button Event:"+btnEvent);				dispatchEvent(new Event(btnEvent));				//trace("BTNEVENT:"+btnEvent);			} 						else if(swState=="0"){				dispatchEvent(new Event("backIsup"));				trace("backIsup");			}				/*var btnFunction:String="remoteBtn"+id+btnState;				trace("Calling function: "+btnFunction+"()");*/				//this[btnFunction]();		}	}	}