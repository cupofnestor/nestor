package com.nestor.sxc.imap{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.DatagramSocketDataEvent;		import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.net.DatagramSocket;	import flash.utils.ByteArray;	public class UDPController extends MovieClip {				public var msg:String;		private var udpHost:String;		private var udpSendPort:int;		private var udpRecPort:int;				//Setup two sockets, one for send, one for receive.		private var outlet:DatagramSocket = new DatagramSocket();		private var inlet:DatagramSocket = new DatagramSocket();		public var deltaWheel:Number; //Wheel Speed and direction.  -30 ~ 30						public function UDPController(host:String, tx:int, rx:int) {						udpHost = host; //Please set these with a config file			udpSendPort = tx;    //Please set these with a config file			udpRecPort = rx;    //Please set these with a config file											initUDP();		}						public function setBrake(drag:Number):void {			trace("setBrake( "+drag+" )");			var wheelCmd:String = "brake;"+drag.toString();			sendCmd(wheelCmd);		}				public function initUDP():void {			trace("initUDP");			inlet.addEventListener(DatagramSocketDataEvent.DATA, dataHandler);       		inlet.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);      		inlet.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			       		inlet.bind(udpRecPort, "127.0.0.1");						//datagramSocket.receive();			inlet.receive();			trace("UDP Inlet: waiting for connection");		}				public function setLed(LEDState:Number):void {			trace("setLed( LEDState: "+LEDState+" )");			var ledCmd:String = "led;"+LEDState.toString();			sendCmd(ledCmd);		}				public function setYear(Year:Number):void {			trace("setYear( Year: "+Year+" )");			var yrCmd:String = "year;"+Year.toString();			sendCmd(yrCmd);		}				public function setImg(olId:Number,imgId:Number):void {			trace("setImg( olId: "+olId+" imgId: "+imgId+" )");			var imgCmd:String = "oled;"+olId.toString()+";"+imgId.toString();			sendCmd(imgCmd);		}								//accepts a (hopefully)well-formed message and sends it as UTF Bytes, appending EOL char.		public function sendCmd(cmd:String):void {			var EOL:String = "\n"; //Newline			//var EOL:String = "\r"; //Carriage Return			trace("Sending :"+cmd+"on "+udpHost+":"+udpSendPort);			var bytes:ByteArray=new ByteArray();			bytes.writeUTFBytes(cmd+EOL);			outlet.send(bytes,0,0,udpHost,udpSendPort);		}										private function dataHandler(e:DatagramSocketDataEvent) : void {			//trace("dataHandler( "+e+" )");			var dEOL:String="\n"			//var dEOL:String="\r"							msg = e.data.readUTFBytes(e.data.length);				msg = msg.split(dEOL).join("");				dispatchEvent(new Event("hello"));				var cmd:Array = msg.split(";");  //Field separator for messages is ";"												switch (cmd[0]) {//sort commands by "domain"									case "sw":					swHandler(cmd[1], cmd[2]);					break;										case "wheel":					deltaWheel= cmd[1];					break;									}		}									private function IOErrorHandler(event:IOErrorEvent) : void {			trace("IOErrorHandler( "+event+" )");			//trace(event);		}				private function securityErrorHandler(event:SecurityErrorEvent) : void {			trace("securityErrorHandler( "+event+" )");			//trace(event);		}				//Parses out the rest of the sw;x;x command		private function swHandler(id:String, swState:String) {			trace("swHandler( id: "+id+", swState: "+swState+" )");						var btnState:String;    //.substr(0,1) strips hidden line break after first character in btnState string -- param 0 starts at beginning of string and param'1' is how many characters			if (swState.substr(0,1)=="0") btnState="Up" else btnState="Down";			// ...the following line does the same as the two lines above, but is not as easy to read:						//var btnState:String = swState.substr(0,1)=="0" ? "Up" : "Down";			var btnFunction:String="remoteBtn"+id+btnState;			trace("Calling function: "+btnFunction+"()");			//this[btnFunction]();		}					}	}