package com.sweetandfizzy.siouxcity {	//  Sioux City Timeline	import com.efnx.fps.fpsBox;	import com.greensock.TweenLite; 	import com.greensock.TweenMax; 	import com.greensock.TimelineLite; 	import com.greensock.TimelineMax; 	import com.greensock.plugins.TweenPlugin; 	import com.greensock.plugins.AutoAlphaPlugin; 	import com.greensock.plugins.TransformAroundPointPlugin; 	import com.greensock.plugins.ColorTransformPlugin;	import com.greensock.plugins.BezierPlugin; 	import com.greensock.easing.*;	import com.greensock.*;	import com.sweetandfizzy.siouxcity.*	import flash.display.DisplayObject;	import flash.display.Loader;    import flash.display.LoaderInfo;	import flash.display.Sprite;    import flash.events.Event;	import flash.filters.ColorMatrixFilter; 	import flash.geom.Point;		import flash.net.*;    import flash.net.URLRequest;	import flash.text.Font;				Font.registerFont(CopperplateLight);	Font.registerFont(Arial);		public class iMap extends Sprite {			public var k:Number  = 180/Math.PI;		private var fps:fpsBox;		public var timeline:Timeline;		public var activeTimeline:TimelineMax;		public var wheelTimeline0:TimelineMax;		public var wheelTimeline1:TimelineMax;		public var wheelTimeline2:TimelineMax;		public var wheelTimeline3:TimelineMax;		public var wheelTimeline4:TimelineMax;		public var wheelTimeline5:TimelineMax;		public var rrTransTimeline1:TimelineMax;		public var rrTransTimeline2:TimelineMax;		public var rrTransTimeline3:TimelineMax;		public var rrTransTimelines:Array;				public var wheelTimelines:Array;		private var levelID:uint;		private var noActiveTween:Boolean;		private var cartNotTweening:Boolean;		private var cartTarget:Number;		//private var noActiveTween:Boolean;		private var assetsFolder:String;		private var sgTrans:Array;		private var timespan:Array;		private var iconLocation:Array;		public var present:Number;		private var iconSequenceID:Array;		private var rra3Labels:Array;		private var rrcLabels:Array;		private var rrComboZoomBuild:Array;		private var photoData:Array;		private var soGroCableDat:Array;		private var popupMessages:Array;		private var iconMCs:Array;		private var coneMCs:Array;		private var coneMCscaleY:Array = new Array();		private var dotMCs:Array;		private var numOfIcons:uint;		private var OLEDs:Array;		private var activeOLEDs:Array;		private var OLEDFunction1:Function;		private var OLEDFunction2:Function;		private var OLEDFunction3:Function;		private var OLEDFunction4:Function;		private var selectedOLEDid:Number;		private var wheelActive:Boolean;		private var wheelChange:Number;		private var wheelPercent:Number = 0;		private var wheelCurrentTime:Number = 0;		private var wheelLastTime:Number = 0;		private var wheelCurrentTimes:Array = [0, 0, 0, 0];		private var wheelLastTimes:Array = [0, 0, 0, 0];		private var wheelFunctions:Array;		private var wheelScale:Array = [0, 0, 0, .25, .25];				private var iconInfo:Array;		public var Aid:uint; // Downtown, So Grows		public var Sid:uint; //		public var Pid:uint;		public var currentID:uint;				private var timespanMultiplier:Number;		private var sumDelay:Number;		private var timelineTitles:Array;		private var titles:MovieClip;		private var currentTitleID:Number;		private var previousTitleID:Number;		private var roadRailID:Number;		private var popPanel:Array;		private var panelID:Number;		private var picCount:uint;		private var picID:uint;		private var thisPicID:uint;		private var lastPicID:uint;		private var thisPicURL:String;		private var lastPicURL:String;		private var picCart:Array;		private var cartID:Number;		private var commonItems:Array;		private var soGrowsItems:Array;		private var roadRailsItems:Array;		private var goToActSequence:Array;				public var movieclipFrame:Number;		public var fullURL:String;		private var oculens:Oculens;		private var photoOculusExtended:Boolean = false;		private var rrBridgeOculusExtended:Boolean = false;		private var armatureRetractable:Boolean = false;		private var oculusCartID:uint;		private var xmlLoader:URLLoader = new URLLoader();		private var xmlData:XML;		private var xmlRoot;		private var lightConeMatrix:Array;  //store it so you can tween back to it anytime like TweenMax.to(my_mc, 1, {colorMatrixFilter:{matrix:myOriginalMatrix}}); 		private var darkConeMatrix:Array;		public var myTimeline:TimelineMax		public function iMap():void {				TweenPlugin.activate([BezierPlugin]); //activation is permanent in the SWF, so this line only needs to be run once.			TweenPlugin.activate([ColorTransformPlugin]);			TweenPlugin.activate([AutoAlphaPlugin]); //activation is permanent in the SWF, so this line only needs to be run once.								timeline = new Timeline();			addChild(timeline);			timeline.y = 40;			oculens = new Oculens(mapArea);			addChild(oculens);			oculens.visible = false;			oculens.alpha=1;						ocularArm.gotoAndStop("hidden");			this.swapChildren(oculens, nullLens);						//fps = new fpsBox();			//addChild(fps);						init();			loadxmlData();		}		private function init():void {			present = Math.min(getThisYear(), 2018);			trace(present); //present = 2014;			panelID = cartID = levelID=0; //Aid = Sid = Pid = 0;			noActiveTween=true;			currentTitleID=NaN;			populateArrays();			setupColorMatrixes();			hideItems(null);			ocularArm.updateArmature();  						mapArea.electricStreetcarLines.Mask.cacheAsBitmap = true;			mapArea.electricStreetcarLines.allLines.cacheAsBitmap = true;			mapArea.electricStreetcarLines.allLines.mask = mapArea.electricStreetcarLines.Mask;			mapArea.roads.mask = mapArea.roads.Mask			mapArea.rra3.routes.mask = mapArea.rra3.Mask;			mapArea.rrb1.rails.mask = mapArea.rrb1.Mask;			mapArea.rrb2.rails.mask = mapArea.rrb2.Mask;			mapArea.rrc1.routes.mask = mapArea.rrc1.Mask;			mapArea.rrc3.routes.mask = mapArea.rrc3.Mask;			mapArea.rrd2.route.mask = mapArea.rrd2.Mask;			mapArea.rrd4.route.mask = mapArea.rrd4.Mask;			mapArea.sc04combo.mask = mapArea.comboMask; 			controller.addEventListener("oled1up", OLED1clicked);			controller.addEventListener("oled2up", OLED2clicked);			controller.addEventListener("oled3up", OLED3clicked);			controller.addEventListener("oled4up", OLED4clicked);			controller.addEventListener("backIsup", navigateBack);			controller.addEventListener("wheelChanged", wheelUpdated);				}		private function loadxmlData():void {			trace("loadxmlData");						xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			xmlLoader.load(new URLRequest("siouxcityData.xml"));		}		private function xmlLoaded(e:Event):void {			trace("xmlLoaded");			xmlData = new XML(e.target.data);			parseXML(xmlData);			mainSequence();		}				private function parseXML(theData:XML):void {			trace("parseXML");			trace( "XML Output");			trace("------------------------" );			trace(xmlData.ACT[0].SCENE[0].PART[2].ICON.attributes()[0]); 			trace( "------------------------" );		}		private function setupColorMatrixes():void {			trace("setupColorMatrixes()");			for (var iD:uint=0; iD<4; iD++) {				lightConeMatrix[iD] = getColorMatrix(coneMCs[iD]); //store it so you can tween back to it anytime like TweenMax.to(my_mc, 1, {colorMatrixFilter:{matrix:lightConeMatrix[iD]}}); 				darkConeMatrix[iD] = getColorMatrix(coneMCs[iD+4]);				//trace("light cmat: "+lightConeMatrix[iD]);				//trace("dark cmat: "+darkConeMatrix[iD]);			}		}		private function getColorMatrix(mc:DisplayObject):Array { 			var f:Array = mc.filters, i:uint; 			for (i = 0; i < f.length; i++) { 				if (f[i] is ColorMatrixFilter) return f[i].matrix; 			} 			return null; 		} 		private function setupIcons():void {			trace("setupIcons "+Sid);			var seqID:uint;			switch (levelID) { 				case 1 : xmlRoot = xmlData.ACT; break;				case 2 : xmlRoot = xmlData.ACT[Aid].SCENE; break;				case 3 : xmlRoot = xmlData.ACT[Aid].SCENE[Sid].PART; break;			}			activeOLEDs = [false, false, false, false];			numOfIcons = xmlRoot.ICON.length();			for (var iD:uint=0; iD<numOfIcons; iD++) {				seqID = xmlRoot.ICON[iD].attributes()[0];				iconSequenceID[seqID] = iD;				iconMCs[seqID].alpha=0;				iconMCs[seqID].visible=true;				iconMCs[seqID].x = xmlRoot.ICON[iD].attributes()[2];				iconMCs[seqID].y = xmlRoot.ICON[iD].attributes()[3];				iconMCs[seqID].scaleX=iconMCs[seqID].scaleY=.65;				levelID<3 ? iconMCs[seqID].gotoAndStop(2) : iconMCs[seqID].gotoAndStop(1);				iconMCs[seqID].loadIconImage(xmlRoot.ICON[iD].attributes()[1]);				if (levelID==3) {					dotMCs[seqID].x =  coneMCs[seqID].x = Number(xmlRoot[iD].DOT.attributes()[0]);					trace("dot "+seqID+" x: "+dotMCs[seqID].x);					dotMCs[seqID].y =  coneMCs[seqID].y = xmlRoot[iD].DOT.attributes()[1];					if ( dotMCs[seqID].x > 0) {						TweenMax.to(coneMCs[seqID], 0, {colorMatrixFilter:{matrix:darkConeMatrix[seqID]}});						coneMCs[seqID].rotation = rotationAngle( dotMCs[seqID].x- iconMCs[seqID].x, dotMCs[seqID].y- iconMCs[seqID].y )-90; 						coneMCs[seqID].scaleX = coneMCs[seqID].scaleY = 0;						coneMCscaleY[seqID] = theDistance( iconMCs[seqID].x, iconMCs[seqID].y, coneMCs[seqID].x, coneMCs[seqID].y)*.01;						if (xmlRoot[iD].DOT.length()>1) {							dotMCs[seqID+4].x =  coneMCs[seqID+4].x = xmlRoot[iD].DOT[1].attributes()[0];							dotMCs[seqID+4].y =  coneMCs[seqID+4].y = xmlRoot[iD].DOT[1].attributes()[1];							TweenMax.to(coneMCs[seqID+4], 0, {colorMatrixFilter:{matrix:darkConeMatrix[seqID]}});							coneMCs[seqID+4].rotation = rotationAngle( dotMCs[seqID+4].x- iconMCs[seqID].x, dotMCs[seqID+4].y- iconMCs[seqID].y )-90; 							coneMCs[seqID+4].scaleX = coneMCs[seqID+4].scaleY = 0;							coneMCscaleY[seqID+4] = theDistance( iconMCs[seqID].x, iconMCs[seqID].y, coneMCs[seqID+4].x, coneMCs[seqID+4].y)*.01;						} else {							dotMCs[seqID+4].x = dotMCs[seqID+4].y = coneMCs[seqID+4].x =  coneMCs[seqID+4].y = coneMCs[seqID+4].alpha = 0;						}					} else {						coneMCs[seqID].scaleX = coneMCs[seqID].scaleY = coneMCs[seqID].alpha = 0;						dotMCs[seqID+4].x = dotMCs[seqID+4].y = dotMCs[seqID+4].alpha = 0;						coneMCs[seqID+4].scaleX = coneMCs[seqID+4].scaleY = coneMCs[seqID+4].alpha = 0;					}				}			}			}				private function mainSequence():void {			ocularArm.updateArmature();			trace("mainSequence");			selectedOLEDid=NaN;			levelID=1;			Aid = Sid = Pid = thisPicID = 0;			timeline.presentTitle(0);			setupIcons();			var c:uint = 0;			for (var iD:uint=0; iD<numOfIcons; iD++) {				activeOLEDs[iD] = true;				TweenLite.to( iconMCs[iD], .6, { delay:.3*iD, autoAlpha:1, scaleX:1, scaleY:1, ease:Quad.easeOut}); //, onUpdate:function(){trace(c++);} 			}		}				private function actSequence(ActID:uint):void {			trace("actSequence");			ocularArm.updateArmature();			selectedOLEDid=NaN;			levelID=2;			Aid = ActID;			Sid = Pid = thisPicID = 0;			trace("actID: "+Aid, "title"+ timelineTitles[Number(xmlData.ACT[Aid].attributes()[0])].name );			timeline.presentTitle( Number(xmlData.ACT[Aid].attributes()[0]) );			setupIcons();			for (var iD:uint=0; iD<numOfIcons; iD++) {				activeOLEDs[iD] = true;				TweenLite.to( iconMCs[iD], .6, { delay:.3*iD, autoAlpha:1, scaleX:1, scaleY:1, ease:Quad.easeOut });			}		}				private function soGrowsSequences(SceneID:uint):void {			trace("soGrowsSequences");   //  goToActSequence			soGrowsSeqReset();			levelID=3;			Sid = SceneID;			Aid = Pid = thisPicID = 0;			iconMCs[Sid].brighten.alpha=0;			setupIcons();			wheelTimelines[3] = new TimelineMax({ onComplete:myFunction });			wheelTimelines[3].pause();			wheelTimelines[3].addCallback( function(){ TweenLite.to( mapArea.spinToBegin, .75, { delay:.3, y: -25, ease:Quad.easeIn }); } , 5 ); //myTimeline.insert( TweenLite.to(mapArea.piercesAddition, 1, { alpha: 1, onStart:function(){ mapArea.piercesAddition.visible=true }}), 5.75);			var extendArm:Number = Number(xmlData.ACT[Aid].SCENE[Sid].PHOTO.attributes()[1] ) == 15 ? -47 : -60 ;			myTimeline = new TimelineMax({ onComplete:myFunction });			var theYear:uint = uint(xmlData.ACT[Aid].SCENE[Sid].TIMESPAN.attributes()[0]);			trace("     >>>>>>>>    Year: "+theYear);			if (timeline.tweenedDate!=theYear ) {				sumDelay =  Math.abs(theYear - timeline.tweenedDate) * .02 + 2.5;				myTimeline.addCallback( timeline.moveToDateRate, 0, [ theYear, sumDelay ]);				sumDelay = sumDelay>1.5 ? sumDelay-1 : .5 ;			}			myTimeline.insert( TweenLite.to(popPanel[panelID], 1.75, { rotation: 0, ease: Quad.easeOut, onUpdate:popPanel[panelID].rotateOthers, onStart:function(){ popPanel[panelID].populateTLField( xmlData.ACT[Aid].SCENE[Sid].HEAD, xmlData.ACT[0].SCENE[0].BODY); panelID = 1-panelID; trace("aft: "+panelID); selectedOLEDid=NaN; }, onComplete:function(){  panelID = 1- panelID;    } }), sumDelay+1.5 );			switch (SceneID) { 				case 0 :					wheelTimelines[3].addCallback( activateLocationIcon, 45, [0] );					wheelTimelines[3].addCallback( activateLocationIcon, 64, [1] );					wheelTimelines[3].addCallback( activateLocationIcon, 71, [2] );					wheelTimelines[3].addCallback( activateLocationIcon, 78, [3] );					myTimeline.addCallback( function(){ mapArea.cableRailLine.visible=true; mapArea.cableRailLine.alpha=1; mapArea.cableRailLine.gotoAndPlay(2); },  sumDelay+0);					myTimeline.insert( TweenLite.to(mapArea.piercesAddition, 1, { autoAlpha:1 }), sumDelay+.5);					myTimeline.addCallback( function(){  wheelFunctions[3] = controlCableRailLine; zeroWheel(); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z0:"+wheelActive); }, sumDelay+1.75);					sumDelay+= 1.75;				break;				case 1 :					wheelTimelines[3].addCallback( activateLocationIcon, 25.5, [0] );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGe1, 3, { autoAlpha:1 }), 24 );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGex1, 3, { autoAlpha:1 }), 57 );					wheelTimelines[3].addCallback( activateLocationIcon, 59, [1] );					wheelTimelines[3].addCallback( activateLocationIcon, 64, [2] );					wheelTimelines[3].addCallback( activate2ndCone, 69, [1] );					wheelTimelines[3].addCallback( activateLocationIcon, 72, [3] );					myTimeline.addCallback( function(){ mapArea.elevatedRailLine.gotoAndPlay(2); mapArea.elevatedRailLine.visible=true; mapArea.elevatedRailLine.alpha=1; },  sumDelay+0);					myTimeline.insert( TweenLite.to(mapArea.areaSGe1, 1, { autoAlpha: .25 }),  sumDelay+0);					myTimeline.insert( TweenLite.to(mapArea.areaSGex1, 1, { autoAlpha: .4 }),  sumDelay+.75);					myTimeline.addCallback( function(){  wheelFunctions[3] = controlElevatedRailLine; zeroWheel(); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z1:"+wheelActive); }, sumDelay+1.75);					sumDelay+= 1.75;				break;				case 2 :					wheelTimelines[3].addCallback( activateLocationIcon, 37, [0] );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGs1, 3, { autoAlpha:1 }), 33.5);					wheelTimelines[3].addCallback( activate2ndCone, 42, [0] );					wheelTimelines[3].addCallback( activateLocationIcon, 50, [1] );					wheelTimelines[3].addCallback( activateLocationIcon, 58, [2] );					wheelTimelines[3].addCallback( activateLocationIcon, 94, [3] );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGe3, 3, { autoAlpha:1 }), 92.5);					mapArea.electricStreetcarLines.Mask.scaleX = mapArea.electricStreetcarLines.Mask.scaleY = 0;//					mapArea.electricStreetcarLines.visible=true; mapArea.electricStreetcarLines.alpha=1;					myTimeline.insert( TweenLite.to(mapArea.electricStreetcarLines.Mask, 2, { scaleX:1.75, scaleY:1.75 }), sumDelay+0);					myTimeline.insert( TweenLite.to(mapArea.areaSGs1, .4, { autoAlpha: .5 }), sumDelay+.5);					myTimeline.insert( TweenLite.to(mapArea.areaSGe3, .4, { autoAlpha: .5 }), sumDelay+1.5);					myTimeline.addCallback( function(){  wheelFunctions[3] = controlElectricStreetcarLines; zeroWheel(); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z2:"+wheelActive); }, sumDelay+1.75);					sumDelay+= 1.75;				break;				case 3 :					mapArea.roads.Mask.scaleX = mapArea.roads.Mask.scaleY = 0;					mapArea.roads.visible = true;					mapArea.roads.alpha = 1;					wheelTimelines[3].insert( TweenLite.to(mapArea.roads.Mask, 100, { scaleX: 2.5,  scaleY: 2.5 }), 0);					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGa2, 5, { autoAlpha:1 }), 14);					wheelTimelines[3].addCallback( activateLocationIcon, 17, [1] );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGa3, 5, { autoAlpha:1 }), 16);					wheelTimelines[3].addCallback( activateLocationIcon, 14, [0] );					wheelTimelines[3].addCallback( activate2ndCone, 27, [1] );					wheelTimelines[3].addCallback( activate2ndCone, 38, [0] );					wheelTimelines[3].insert( TweenLite.to(mapArea.areaSGa1, 5, { autoAlpha:1 }), 47);					wheelTimelines[3].addCallback( activateLocationIcon, 48, [2] );					wheelTimelines[3].addCallback( activate2ndCone, 50, [2] );										myTimeline.insert( TweenLite.to(mapArea.areaSGa1, .6, { autoAlpha: .65 }),  sumDelay+0);					myTimeline.insert( TweenLite.to(mapArea.areaSGa2, .6, { autoAlpha: .65 }),  sumDelay+.4);					myTimeline.insert( TweenLite.to(mapArea.areaSGa3, .6, { autoAlpha: .65 }),  sumDelay+.8);					myTimeline.addCallback( function(){ wheelFunctions[3] = controlAutomobiles; zeroWheel(); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z3:"+wheelActive); },  sumDelay+1);					sumDelay+=1;				break;			}			wheelTimelines[3].addCallback( function(){}, 100);			var order:uint = 0;			for (var iD:uint = 0; iD<numOfIcons; iD++) {				order = xmlData.ACT[Aid].SCENE[Sid].PART[iD].ICON.attributes()[0];				activeOLEDs[iD] = false;				dotMCs[iD].visible = dotMCs[iD+4].visible = true;				iconMCs[iD].scaleX = iconMCs[iD].scaleY = .65;				coneMCs[iD].scaleX = coneMCs[iD].scaleY = coneMCs[iD+4].scaleX =coneMCs[iD+4].scaleY = 0;				myTimeline.insert( TweenLite.to( dotMCs[iD], .3, { autoAlpha:1, delay:.35*order }), sumDelay);				myTimeline.insert( TweenLite.to( dotMCs[iD+4], .3, { autoAlpha:1, delay:.35*order }), sumDelay+.1);							}		}						private function roadsAndRailsSequence(SceneID:uint = 0):void {			trace("roadsAndRailsSequence "+SceneID);			roadsAndRailsSeqReset();						var iD:uint;			timeline.clearTimeline();			timespanMultiplier =  ((present+2)-1840) /100;			levelID=3;			Sid = SceneID;			Aid = 1; Pid = thisPicID = sumDelay = 0;			wheelScale[levelID]=.035;						timeline.presentTitle( Number(xmlData.ACT[Aid].SCENE[Sid].attributes()[0]) );			setupIcons();									wheelTimelines[3] = new TimelineMax({ onComplete:myFunction });			wheelTimelines[3].pause();			wheelTimelines[3].addCallback( function(){ TweenLite.to( mapArea.spinToBegin, .75, { delay:.3, y: -25, ease:Quad.easeIn }); } , 5 );			if (timeline.tweenedDate!=1840) {				timeline.moveToDate(1840);				sumDelay=3.5;			} 			var dates:XMLList = xmlData.ACT[Aid].SCENE.PART.DATE;			roadRailID = 0;						for each ( var prop:XML in dates ){				prop.@span==undefined ? timeline.drawYearAt( uint(prop.@year)) : timeline.drawTimespanArc( uint(prop.@year) , uint(prop.@span) );				var prc:Number =  rrYearToPercent( uint(prop.@year) );				trace("prc: "+prc);				wheelTimelines[3].addCallback( activateRoadsAndRailsIcon, prc, [roadRailID%4] );				if (roadRailID%4==0 && roadRailID>0) {					wheelTimelines[3].addCallback( toggleIcons, prc-1.5, [4] );					wheelTimelines[3].addCallback( nextRRSet , prc );				}				roadRailID++;			}			 			wheelTimelines[3].insert( TweenLite.to(mapArea.rra3.Mask, 1.1, { scaleX: 2.5,  scaleY: 2.5, onStart:function(){ mapArea.rra3.Mask.scaleX=mapArea.rra3.Mask.scaleY=0; mapArea.rra3.visible=true; mapArea.rra3.alpha=1; } }), 8.3); // 			wheelTimelines[3].insert( TweenLite.to(mapArea.rra3, 1, {autoAlpha:0 }), 15);			var delay:Number = 8.8;			for (iD = 0; iD<6; iD++) wheelTimelines[3].insert( TweenLite.to(rra3Labels[iD], .2, { autoAlpha:1 }), delay+=.1);			wheelTimelines[3].addCallback( toggleTimeTempo, 8.3, [.035, .01]);			wheelTimelines[3].addCallback( toggleTimeTempo, 9.4, [.01, .035]);						wheelTimelines[3].addCallback( function(){ mapArea.rrb1.Mask.scaleX=mapArea.rrb1.Mask.scaleY=0; }, 16.4 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrb1.Mask, 5, { scaleX: 2.5,  scaleY: 2.5, onStart:function(){mapArea.rrb1.visible=true; mapArea.rrb1.alpha=1; } }), 16.5); // mapArea.rrb1.Mask.scaleX=mapArea.rrb1.Mask.scaleY=0;			wheelTimelines[3].addCallback( function(){ mapArea.rrb2.Mask.scaleX=mapArea.rrb2.Mask.scaleY=0; }, 28.4 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrb2.Mask, 5, { scaleX: 2.5,  scaleY: 2.5, onStart:function(){mapArea.rrb2.visible=true; mapArea.rrb2.alpha=1; } }), 28.5); //mapArea.rrb2.Mask.scaleX=mapArea.rrb2.Mask.scaleY=0;			wheelTimelines[3].insert( TweenLite.to(mapArea.rrb1, 1, {autoAlpha:0 }), 42.1);			wheelTimelines[3].insert( TweenLite.to(mapArea.rrb2, 1, {autoAlpha:0 }), 42.1);			wheelTimelines[3].addCallback( function(){ mapArea.rrc1.Mask.scaleX=mapArea.rrc1.Mask.scaleY=0; }, 43.15 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.Mask, 3.25, { scaleX: 2.5,  scaleY: 2.5, onStart:function(){mapArea.rrc1.visible=true; mapArea.rrc1.alpha=1; } }), 44); // mapArea.rrb1.Mask.scaleX=mapArea.rrb1.Mask.scaleY=0;			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.rt50, .5,  { autoAlpha:1 }), 44.5); //44.7			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.rt15, .5,  { autoAlpha:1 }), 44.6); //44.8			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.rt29, .5,  { autoAlpha:1 }), 44.8); //45			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.rt12, .5,  { autoAlpha:1 }), 45); //45.15			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.rt20, .5,  { autoAlpha:1 }), 45.1); //45.2			wheelTimelines[3].addCallback( function(){ mapArea.rrc3.Mask.scaleX=mapArea.rrc3.Mask.scaleY=0; }, 50 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc3.Mask, 3.25, { scaleX: 2.5,  scaleY: 2.5, onStart:function(){mapArea.rrc3.visible=true; mapArea.rrc3.alpha=1; } }), 50.7); //mapArea.rrb2.Mask.scaleX=mapArea.rrb2.Mask.scaleY=0;			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.sr20a, .5,  { autoAlpha:1 }), 51); //			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc3.sr75a, .5,  { autoAlpha:1 }), 51.7); //			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc3.sr75b, .5,  { autoAlpha:1 }), 51.8); //			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1.sr20b, .5,  { autoAlpha:1 }), 52.2); //			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc1, 1, {autoAlpha:0 }), 57.4);			wheelTimelines[3].insert( TweenLite.to(mapArea.rrc3, 1, {autoAlpha:0 }), 57.5);			wheelTimelines[3].addCallback( function(){ mapArea.rrd2.Mask.scaleX=2.5; mapArea.rrd2.Mask.scaleY=0; }, 63.0 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd2.Mask, 5.5, { scaleY: 2.5, onStart:function(){mapArea.rrd2.visible=true; mapArea.rrd2.alpha=1; } }), 66.7); // mapArea.rrd2.Mask.scaleX=mapArea.rrd2.Mask.scaleY=0;			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd2.fr29a, .5,  { autoAlpha:1 }), 67.4); //45.2			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd2.fr29b, .5,  { autoAlpha:1 }), 69.3); //45.2			wheelTimelines[3].addCallback( function(){ mapArea.rrd4.Mask.scaleX=2.5; mapArea.rrd4.Mask.scaleY=0; }, 92.99 );			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd4.Mask, 7, { scaleY: 2.5, onStart:function(){mapArea.rrd4.visible=true; mapArea.rrd4.alpha=1; } }), 93); //mapArea.rrd4.Mask.scaleX=mapArea.rrd4.Mask.scaleY=0;			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd4.fr20, .5,  { autoAlpha:1 }), 94.9); //45.2			wheelTimelines[3].insert( TweenLite.to(mapArea.rrd4.fr75, .5,  { autoAlpha:1 }), 96); //45.2			wheelTimelines[3].addCallback( function(){}, 100);			myTimeline = new TimelineMax({ onComplete:myFunction });			myTimeline.addCallback( timeline.moveToDate, sumDelay+.1, [ uint(xmlData.ACT[Aid].SCENE[Sid].PART[Pid].DATE.attributes()[0]) ]);			myTimeline.addCallback( function(){ activeOLEDs[0] = true; TweenLite.to( iconMCs[0], .3, { autoAlpha:1, ease:Quad.easeOut }); TweenLite.to( iconMCs[0], .6, { scaleX:1, scaleY:1, ease:Quad.easeOut }); },  sumDelay+3.5);			myTimeline.addCallback( function(){wheelFunctions[3] = controlRoadsAndRailsTimeline; timeline.incrementActive(); setWheel(3); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z:"+wheelActive); }, sumDelay+4);		}						private function downtownSequences(SceneID:uint):void {			trace("downtownSequences");   //  goToActSequence			downtownSeqReset();			var iD:uint;						timespanMultiplier =  ((present+2)-1840) /100;			levelID=3;			Sid = SceneID;			Aid = 2; Pid = thisPicID = sumDelay = 0;			iconMCs[Sid].brighten.alpha=0;			wheelScale[levelID]=.035;						timeline.clearTimeline();			timeline.presentTitle( Number(xmlData.ACT[Aid].SCENE[Sid].attributes()[0]) );						setupIcons();															wheelTimelines[3] = new TimelineMax({ onComplete:myFunction });			wheelTimelines[3].pause();			wheelTimelines[3].addCallback( function(){ TweenLite.to( mapArea.spinToBegin, .75, { delay:.3, y: -25, ease:Quad.easeIn }); } , 5 ); //myTimeline.insert( TweenLite.to(mapArea.piercesAddition, 1, { alpha: 1, onStart:function(){ mapArea.piercesAddition.visible=true }}), 5.75);			/*			var extendArm:Number = Number(xmlData.ACT[Aid].SCENE[Sid].PHOTO.attributes()[1] ) == 15 ? -47 : -60 ;						myTimeline = new TimelineMax({ onComplete:myFunction });						var theYear:uint = uint(xmlData.ACT[Aid].SCENE[Sid].TIMESPAN.attributes()[0]);			trace("     >>>>>>>>    Year: "+theYear);			if (timeline.tweenedDate!=theYear ) {				sumDelay =  Math.abs(theYear - timeline.tweenedDate) * .02 + 2.5;				myTimeline.addCallback( timeline.moveToDateRate, 0, [ theYear, sumDelay ]);				sumDelay = sumDelay>1.5 ? sumDelay-1 : .5 ;			}			myTimeline.insert( TweenLite.to(popPanel[panelID], 1.75, { rotation: 0, ease: Quad.easeOut, onUpdate:popPanel[panelID].rotateOthers, onStart:function(){ popPanel[panelID].populateTLField( xmlData.ACT[Aid].SCENE[Sid].HEAD, xmlData.ACT[0].SCENE[0].BODY); panelID = 1-panelID; trace("aft: "+panelID); selectedOLEDid=NaN; }, onComplete:function(){  panelID = 1- panelID;    } }), sumDelay+1.5 );			*/						/*			wheelTimelines[3] = new TimelineMax({ onComplete:myFunction });			wheelTimelines[3].pause();			wheelTimelines[3].addCallback( function(){ TweenLite.to( mapArea.spinToBegin, .75, { delay:.3, y: -25, ease:Quad.easeIn }); } , 5 );			if (timeline.tweenedDate!=1840) {				timeline.moveToDate(1840);				sumDelay=3.5;			}			*/						roadRailID = 0;			//dates 			var dates:XMLList = xmlData.ACT[Aid].SCENE[SceneID].PART.DATE;			for each ( var prop:XML in dates ){				prop.@span==undefined ? timeline.drawYearAt( uint(prop.@year)) : timeline.drawTimespanArc( uint(prop.@year) , uint(prop.@span) );				var prc:Number =  rrYearToPercent( uint(prop.@year) );				trace("prc: "+prc);				wheelTimelines[3].addCallback( activateRoadsAndRailsIcon, prc, [roadRailID%4] );				if (roadRailID%4==0 && roadRailID>0) {					wheelTimelines[3].addCallback( toggleIcons, prc-1.5, [4] );					wheelTimelines[3].addCallback( nextRRSet , prc );				}				roadRailID++;			}						switch (SceneID) { 				case 0 :									wheelTimelines[3].addCallback( activateLocationIcon, 45, [0] );					wheelTimelines[3].addCallback( activateLocationIcon, 64, [1] );					wheelTimelines[3].addCallback( activateLocationIcon, 71, [2] );					wheelTimelines[3].addCallback( activateLocationIcon, 78, [3] );					//myTimeline.addCallback( function(){ mapArea.cableRailLine.visible=true; mapArea.cableRailLine.alpha=1; mapArea.cableRailLine.gotoAndPlay(2); },  sumDelay+0);					//myTimeline.insert( TweenLite.to(mapArea.piercesAddition, 1, { autoAlpha:1 }), sumDelay+.5);					myTimeline.addCallback( function(){  wheelFunctions[3] = controlCableRailLine; zeroWheel(); activateWheel(); activeTimeline = wheelTimelines[3]; trace("Z0:"+wheelActive); }, sumDelay+1.75);					sumDelay+= 1.75;				break;			}								}		private function soGrowsSeqReset():void {			trace("soGrowsSeqReset");			ocularArm.updateArmature();			mapArea.cableRailLine.alpha = 0;			mapArea.cableRailLine.visible=false;			mapArea.cableRailLine.gotoAndStop(2);			mapArea.elevatedRailLine.alpha = 0;			mapArea.elevatedRailLine.visible=false;			mapArea.elevatedRailLine.gotoAndStop(2);			mapArea.electricStreetcarLines.visible=false;			mapArea.electricStreetcarLines.drawLines.gotoAndStop(2);			mapArea.electricStreetcarLines.Mask.scaleX = mapArea.electricStreetcarLines.Mask.scaleY = 0;			mapArea.roads.visible=false;			mapArea.roads.Mask.scaleX = mapArea.roads.Mask.scaleY = 0;		}		private function roadsAndRailsSeqReset():void {			trace("roadsAndRailsSeqReset");			ocularArm.updateArmature();			mapArea.rra3.visible=false;			mapArea.areaRRa3.visible=false;			mapArea.areaRRa3.alpha = 0;			mapArea.rra3.Mask.scaleX = mapArea.rra3.Mask.scaleY = .3;			hideItems(rra3Labels.concat(rrcLabels).concat(rrComboZoomBuild));			//hideItems(rra3Labels);		}		private function downtownSeqReset():void {			trace("downtownSeqReset");			ocularArm.updateArmature();			//mapArea.rra3.visible=false;			//mapArea.areaRRa3.visible=false;			//mapArea.areaRRa3.alpha = 0;			//mapArea.rra3.Mask.scaleX = mapArea.rra3.Mask.scaleY = .3;			//hideItems(rra3Labels.concat(rrcLabels).concat(rrComboZoomBuild));			//hideItems(rra3Labels);		}		private function pauseMyTimeline():void { myTimeline.pause(); }		private function toggleTimeTempo(past:Number, future:Number):void {			wheelScale[levelID] = wheelChange < 0 ? past : future;			trace("wheelScale: "+wheelScale[levelID]);		}				/*		private function soGrowsSequence():void {			levelID=2;			Aid = Sid = Pid = thisPicID = 0;			setupIcons();			//TweenLite.delayedCall(1, timeline.moveToDate, [1840] );				for (var iD:uint=0; Pid<numOfIcons; Pid++) {				activeOLEDs[Pid] = true;				TweenLite.to( iconMCs[Pid], .6, { delay:.3*Pid, alpha: 1, scaleX:1, scaleY:1, ease:Quad.easeOut });			}		}				private function roadsAndRailsSequence():void {			levelID=2;			Aid = Sid = Pid = thisPicID = 0;			setupIcons();			//TweenLite.delayedCall(1, timeline.moveToDate, [1840] );				for (var iD:uint=0; Pid<numOfIcons; Pid++) {				activeOLEDs[Pid] = true;				TweenLite.to( iconMCs[Pid], .6, { delay:.3*Pid, alpha: 1, scaleX:1, scaleY:1, ease:Quad.easeOut });			}		}				private function discoverDowntownSequence():void {			levelID=2;			Aid = Sid = Pid = thisPicID = 0;			setupIcons();			//TweenLite.delayedCall(1, timeline.moveToDate, [1840] );				for (var iD:uint=0; Pid<numOfIcons; Pid++) {				activeOLEDs[Pid] = true;				TweenLite.to( iconMCs[Pid], .6, { delay:.3*Pid, alpha: 1, scaleX:1, scaleY:1, ease:Quad.easeOut });			}		}		*/		private function controlCableRailLine():void {			var n1:Number = wheelPercent*.01;			wheelScale[levelID]= .25*(1-n1*.75);			trace(wheelPercent, wheelScale[levelID]);			mapArea.cableRailLine.gotoAndStop(Math.round(wheelPercent*.28)+64);		}		private function controlElevatedRailLine():void {			var n1:Number = wheelPercent*.01;			wheelScale[levelID]= (.25*(1-n1*.75))*.75;			mapArea.elevatedRailLine.gotoAndStop(Math.round(wheelPercent*.42)+46);		}		private function controlElectricStreetcarLines():void {			trace(wheelPercent);			wheelScale[levelID]=.1;			mapArea.electricStreetcarLines.drawLines.gotoAndStop(Math.round(wheelPercent*1.5)+3);		}		private function controlAutomobiles():void {			trace(wheelPercent);			wheelScale[levelID]=.1;			//mapArea.roads.Mask.scaleX=mapArea.roads.Mask.scaleY=wheelPercent*.05;		}				private function controlRoadsAndRailsTimeline():void {			//trace("     controlRoadsAndRailsTimeline");			trace("    "+wheelPercent.toFixed(2));			//wheelScale=.035;			timeline.tweenedDate = wheelPercent*timespanMultiplier+1840;			timeline.rotateToDate();		}		private function controlRRComboBridge():void { // anim frm 1-43			trace("    "+wheelPercent.toFixed(2));			rrComboZoomBuild[1].comboBuild.gotoAndStop(Math.round((wheelPercent-25)*1.33));		}		private function toggleRRComboAnimControl():void {			trace("toggleRRComboAnimControl");			wheelFunctions[4] = wheelChange > 0 ? controlRRComboBridge : noFunction;			wheelChange > 0 ? trace("controlRRComboBridge") : trace("noFunction");		}		private function wheelRecedeRRComboOculus():void {			// %68-72    anim frm 59-94    trace(" w% "+wheelPercent.toFixed(2)+"  ct "+wheelTimelines[4].currentTime.toFixed(2));			// %68-72    anim frm 59-78    trace(" w% "+wheelPercent.toFixed(2)+"  ct "+wheelTimelines[4].currentTime.toFixed(2));			//var theFrame = Math.round(( wheelPercent - 61.25 ) * 8.75 )			var theFrame = Math.round(( wheelPercent - 55.57 ) * 4.75 )			if ( theFrame > 58 && theFrame < 95 ) ocularArm.gotoAndStop( theFrame );		}		private function zeroWheel():void {			wheelPercent = 0;			controller.wheelValue = 0;		}		private function setWheel(num:Number):void {			wheelPercent = num;			controller.wheelValue = 0;		}		private function activateWheel():void {			trace("activateWheel()");			trace("");			wheelActive=true;			TweenLite.to( mapArea.spinToBegin, 1.25, { delay:.3, y: 36.5, ease:Quad.easeOut });					}		private function reactivateWheel():void {			trace("activateWheel()");			wheelActive=true;		}		private function activateZoom():void {			trace("activateZoom()");			wheelPercent = 0;			wheelFunctions[4] = zoomImage;// traceWheel;			wheelActive=true;			trace("oculusCartID: "+oculusCartID);			picCart[oculusCartID].setZoomToPnt(new Point(-xmlData.ACT[Aid].SCENE[Sid].PART[Pid].ZOOMABLE.attributes()[1], -xmlData.ACT[Aid].SCENE[Sid].PART[Pid].ZOOMABLE.attributes()[2]));		}		private function zoomImage():void {			picCart[oculusCartID].zoomTo(wheelPercent*.01);			ocularArm.knoblever.rotation = wheelPercent*.5;		}				private function suspendForTween():void {			trace("suspendForTween()");			noActiveTween=false;			wheelActive=false;		}		private function resumeAfterTween():void {			trace("resumeAfterTween()");			trace("   /");			noActiveTween=true;			//controller.wheelValue = wheelCurrentTimes[levelID] ;			wheelActive=true;		}				private function activateLocationIcon(theIcon:uint):void {			trace("activateLocationIcon");			Pid = theIcon;			if ( wheelChange>0 ) {				activeOLEDs[Pid] = true;				coneMCscaleY[Pid] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[Pid].x, coneMCs[Pid].y)*.01;				coneMCs[Pid].scaleX = coneMCs[Pid].scaleY = 0;				TweenLite.to( coneMCs[Pid], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[Pid], ease:Quad.easeIn });				TweenLite.to( iconMCs[Pid], .3, { delay:.3, autoAlpha:1, ease:Quad.easeOut });				TweenLite.to( iconMCs[Pid], .6, { delay:.3, scaleX:1, scaleY:1, ease:Quad.easeOut });			} else {				activeOLEDs[Pid] = false;				TweenLite.to( coneMCs[Pid], .3, { delay:.1, autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });				TweenLite.to( iconMCs[Pid], .4, { delay:0, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn });			}		}				private function activateRoadsAndRailsIcon(theIcon:uint):void {			trace("activateRoadsAndRailsIcon");			Pid = theIcon;			TweenLite.killTweensOf(iconMCs[Pid]);			TweenLite.killTweensOf(dotMCs[Pid]);			TweenLite.killTweensOf(coneMCs[Pid]);			TweenLite.killTweensOf(dotMCs[Pid+4]);			TweenLite.killTweensOf(coneMCs[Pid+4]);			if ( wheelChange>0 ) {				activeOLEDs[Pid] = true;				coneMCscaleY[Pid] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[Pid].x, coneMCs[Pid].y)*.01;				coneMCs[Pid].scaleX = coneMCs[Pid].scaleY = 0;				TweenLite.to( dotMCs[Pid], .2, { autoAlpha:1 });				TweenLite.to( coneMCs[Pid], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[Pid], ease:Quad.easeIn });				TweenLite.to( iconMCs[Pid], .3, { delay:.3, autoAlpha:1, ease:Quad.easeOut });				TweenLite.to( iconMCs[Pid], .6, { delay:.3, scaleX:1, scaleY:1, ease:Quad.easeOut });			} else {				activeOLEDs[Pid] = false;				TweenLite.to( dotMCs[Pid], .2, { delay:.2, autoAlpha:0 });				TweenLite.to( coneMCs[Pid], .3, { delay:.1, autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });				TweenLite.to( iconMCs[Pid], .4, { delay:0, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn });			}			/*			activeOLEDs[iD] = false;			dotMCs[iD].visible = dotMCs[iD+4].visible = true;			iconMCs[iD].scaleX = iconMCs[iD].scaleY = .65;			coneMCs[iD].scaleX = coneMCs[iD].scaleY = coneMCs[iD+4].scaleX =coneMCs[iD+4].scaleY = 0;			myTimeline.insert( TweenLite.to( dotMCs[iD], .3, { autoAlpha:1, delay:.35*order }), sumDelay);			myTimeline.insert( TweenLite.to( dotMCs[iD+4], .3, { autoAlpha:1, delay:.35*order }), sumDelay+.1);			*/		}				private function retroactiveRoadsAndRailsIcon(theIcon:uint):void {			trace("retroactiveRoadsAndRailsIcon");			Pid = theIcon;			TweenLite.killTweensOf(iconMCs[Pid]);			TweenLite.killTweensOf(dotMCs[Pid]);			TweenLite.killTweensOf(coneMCs[Pid]);			TweenLite.killTweensOf(dotMCs[Pid+4]);			TweenLite.killTweensOf(coneMCs[Pid+4]);			if ( wheelChange<=0 ) {				activeOLEDs[Pid] = true;				coneMCs[Pid].scaleX = coneMCs[Pid].scaleY = 0;				TweenLite.to( dotMCs[Pid], .2, { autoAlpha:1 });				TweenLite.to( dotMCs[Pid+4], .2, { autoAlpha:1 });				coneMCscaleY[Pid] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[Pid].x, coneMCs[Pid].y)*.01;				coneMCscaleY[Pid+4] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[Pid+4].x, coneMCs[Pid+4].y)*.01;				TweenLite.to( iconMCs[Pid], .3, { delay:.3, autoAlpha:1, ease:Quad.easeOut });				TweenLite.to( iconMCs[Pid], .6, { delay:.3, scaleX:1, scaleY:1, ease:Quad.easeOut });				if (dotMCs[Pid].x > 0) TweenLite.to( coneMCs[Pid], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[Pid], ease:Quad.easeIn });				if (dotMCs[Pid+4].x > 0) TweenLite.to( coneMCs[Pid+4], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[Pid+4], ease:Quad.easeIn });			} else {				activeOLEDs[Pid] = false;				TweenLite.to( dotMCs[Pid], .2, { delay:.2, autoAlpha:0 });				TweenLite.to( dotMCs[Pid+4], .2, { delay:.2, autoAlpha:0 });				TweenLite.to( coneMCs[Pid], .3, { delay:.1, autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });				TweenLite.to( coneMCs[Pid+4], .3, { delay:.1, autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });				TweenLite.to( iconMCs[Pid], .4, { delay:0, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn });			}		}		private function activate2ndCone(theIcon:uint):void {			trace("activate2ndCone");			Pid = theIcon;			if ( wheelChange>0 ) {				 coneMCs[Pid+4].visible = true;				 coneMCscaleY[Pid+4] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[Pid+4].x, coneMCs[Pid+4].y)*.01;				TweenLite.to( coneMCs[Pid+4], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[Pid+4], ease:Quad.easeIn  });			} else {				TweenLite.to( coneMCs[Pid+4], .3, {  autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });			}		}		private function activateRRDotCone(theIcon:uint, dotConeID:uint):void {			trace("activateRRDotCone");			Pid = theIcon;			if ( wheelChange>0 ) {				 coneMCs[dotConeID].visible = true;				 coneMCscaleY[dotConeID] = theDistance( iconMCs[Pid].x, iconMCs[Pid].y, coneMCs[dotConeID].x, coneMCs[dotConeID].y)*.01;				TweenLite.to( dotMCs[dotConeID], .2, { autoAlpha:1 });				TweenLite.to( coneMCs[dotConeID], .7, { autoAlpha:1, scaleX:1, scaleY:coneMCscaleY[dotConeID], ease:Quad.easeIn  });			} else {				TweenLite.to( dotMCs[dotConeID], .2, { autoAlpha:0 });				TweenLite.to( coneMCs[dotConeID], .3, {  autoAlpha:0, scaleX:0, scaleY:0, ease:Quad.easeIn });			}		}		private function nextRRSet():void {			trace("nextRRSet");			if (wheelChange>0) {				Sid++; 				setupIcons();			} else if (Sid>0) {				Sid--;				setupIcons();			}		}		private function toggleIcons(howmany:uint = 4):void {			trace("toggleIcons");			if ( wheelChange>0 ) {				fadeOutItems(commonItems);				//TweenLite.delayedCall(sumDelay, function(){ Sid++; setupIcons(); } );				} else {				//if (Sid>0) Sid--;				//setupIcons();				fadeInIcons(howmany);			}		}				private function fadeOutItems(itemsList:Array):void {			trace("fadeOutItems");			sumDelay  = 0;			var arrayLength:uint = itemsList.length;			for (var n:uint=0; n<arrayLength; n++) {				if (itemsList[n].visible) TweenLite.to( itemsList[n], .5, { autoAlpha:0, delay:sumDelay+=.1 });			}		}		private function fadeInIcons(howmany:uint = 4):void {			trace("fadeInIcons "+howmany);			sumDelay  = 0;			//fadeInItems(dotMCs);			for (var n:uint=0; n<howmany; n++) {				TweenLite.delayedCall( sumDelay+=.1, retroactiveRoadsAndRailsIcon, [n] );				}		}		private function fadeInItems(itemsList:Array):void {			trace("fadeInItems");			sumDelay  = 0;			var arrayLength:uint = itemsList.length;			for (var n:uint=0; n<arrayLength; n++) {				if (itemsList[n].visible) TweenLite.to( itemsList[n], .5, { autoAlpha:1, delay:sumDelay+=.1 });			}		}		private function hideItems(itemsList:Array):void {			trace("hideItems");			if (itemsList == null) { // hide all items				hideItems(commonItems);				hideItems(soGrowsItems);				hideItems(roadRailsItems);			} else {				var arrayLength:uint = itemsList.length;				for (var n:uint=0; n<arrayLength; n++) {					itemsList[n].alpha = 0;					itemsList[n].visible = false;				}			}		}		private function hide4ActSequence(itemsList:Array):void {			trace("hide4ActSequence");			sumDelay  = 0;			var arrayLength:uint = itemsList.length;			for (var n:uint=0; n<arrayLength; n++) {				if (itemsList[n].visible) TweenLite.to( itemsList[n], .5, { autoAlpha:0, delay:sumDelay+=.1 });			}			TweenLite.delayedCall(sumDelay, actSequence, [Aid] );			}		private function hide4MainSequence(itemsList:Array):void {			trace("hide4MainSequence");						sumDelay  = 0;			var arrayLength:uint = itemsList.length;			for (var n:uint=0; n<arrayLength; n++) {				if (itemsList[n].visible) TweenLite.to( itemsList[n], .5, { autoAlpha:0, delay:sumDelay+=.1 });			}			TweenLite.delayedCall(sumDelay, mainSequence );			}				private function toggleOLED(theID:uint) {			trace("toggleOLED");			armatureRetractable = false;			if (photoOculusExtended) recedePhotoOculus();			if (rrBridgeOculusExtended) recedeRRBridgeOculus();			timeline.decrementActive();			currentID = iconSequenceID[theID];			var iD:uint;			switch (levelID) { 				case 1 : xmlRoot = xmlData.ACT; Aid = theID; break;				case 2 : xmlRoot = xmlData.ACT[Aid].SCENE; Sid = theID; break;				case 3 : xmlRoot = xmlData.ACT[Aid].SCENE[Sid].PART; Pid = currentID; break;				case 4 : xmlRoot = xmlData.ACT[Aid].SCENE[Sid].PART; Pid = currentID;  break;			}			trace("  >>  level: "+levelID+"  theID: "+theID+"  currentID: "+currentID+"  Aid: "+Aid+"  Sid: "+Sid+"  Pid: "+Pid);			if (theID == selectedOLEDid) { // user toggled button 'off'				selectedOLEDid=NaN;				TweenLite.to( iconMCs[theID].brighten, 1, { autoAlpha:0 } );				TweenMax.to(coneMCs[theID], .5, {colorMatrixFilter:{matrix:darkConeMatrix[theID]}});				TweenMax.to(coneMCs[theID+4], .5, {colorMatrixFilter:{matrix:darkConeMatrix[theID]}});							} else {				if ( !isNaN(selectedOLEDid) ) TweenLite.to( iconMCs[selectedOLEDid].brighten, 1, { autoAlpha:0 } );				TweenLite.to( iconMCs[theID].brighten, 1, { autoAlpha:1 } );				if (levelID==1) {					sumDelay = 0;					for (iD=0; iD<numOfIcons; iD++) {						if (iD!=theID) TweenLite.to( iconMCs[iD], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn });					}					if (Aid==1) {						TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: function(){  iconMCs[theID].brighten.alpha=0; roadsAndRailsSequence(); }  });					} else {						TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: function(){  iconMCs[theID].brighten.alpha=0; actSequence(theID); }  });					}				} else {					if (levelID==2) {  						sumDelay = 0;						for (iD; iD<numOfIcons; iD++) {							if (iD!=theID) TweenLite.to( iconMCs[iD], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn });						}						 																																														 // soGrowsSequences						TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: goToActSequence[Aid], onCompleteParams:[theID] });  // returns to Act sequence, with selected iconID												var theYear:uint = uint(xmlData.ACT[Aid].SCENE[theID].TIMESPAN.attributes()[0]);						if (timeline.tweenedDate!=theYear ) {							timeline.clearTimeline();							timeline.presentTitle( Number(xmlData.ACT[Aid].SCENE[theID].attributes()[0]) );							timeline.drawTimespanArc(theYear , uint(xmlData.ACT[Aid].SCENE[theID].TIMESPAN.attributes()[1]) );							trace(" Year: "+theYear);						}  						/* switch (Aid) { 							case 0 : TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: soGrowsSequences, onCompleteParams:[theID] }); break; //iconMCs[theID].brighten.alpha=0; 							case 1 : TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: function(){ roadsAndRailsSequence(theID); }  }); break; //iconMCs[theID].brighten.alpha=0; 							case 2 : TweenLite.to( iconMCs[theID], .4, { delay:sumDelay+=.3, autoAlpha:0, scaleX:.65, scaleY:.65, ease:Quad.easeIn, onComplete: function(){ soGrowsSequences(theID); }  }); break; //iconMCs[theID].brighten.alpha=0; 						}*/					} else if (levelID>=3) {						//trace(" levelID==3 && Aid ==1 && Sid == 1 && Pid==3");						levelID=4;						if ( !isNaN(selectedOLEDid) ) {							TweenMax.to(coneMCs[selectedOLEDid], .4, {colorMatrixFilter:{matrix:darkConeMatrix[selectedOLEDid]}});							TweenMax.to(coneMCs[selectedOLEDid+4], .4, {colorMatrixFilter:{matrix:darkConeMatrix[selectedOLEDid]}});						}						TweenMax.to(coneMCs[theID], .7, {colorMatrixFilter:{matrix:lightConeMatrix[theID]}});						TweenMax.to(coneMCs[theID+4], .7, {colorMatrixFilter:{matrix:lightConeMatrix[theID]}});					}					picCount = xmlRoot[currentID].PHOTO.length();					sumDelay = 0;					wheelTimelines[4] = new TimelineMax({ onComplete:wheelTimelineComplete, onReverseComplete:autoRetractOcularArm });					wheelTimelines[4].pause();										if (levelID==4 && Aid ==1 && Sid == 1 && Pid==3) {   // combo bridge build animation						trace(" levelID==4 && Aid ==1 && Sid == 1 && Pid==3");						if (picCart[1-cartID].rotation<60) picCart[1-cartID].rollCarriageTo(60);						dispatchRRBridgeOculus();						wheelScale[4]=.05;						rrComboZoomBuild[1].comboBuild.gotoAndStop(1);						rrComboZoomBuild[0].scaleX=rrComboZoomBuild[0].scaleY=rrComboZoomBuild[1].scaleX=rrComboZoomBuild[1].scaleY=.31;  //.333;						wheelTimelines[4].insert( TweenLite.to(ocularArm.knoblever, 5, { rotation: 50, ease:Quart.easeInOut }), .5 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[0], .5, { autoAlpha:1 }), 0 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[0], 5, { scaleX:2.7, scaleY:2.7, ease:Quart.easeInOut }), .5 );  //, onUpdate: function(){ trace("scale: "+ rrComboZoomBuild[0].scaleX+"   % "+wheelPercent.toFixed(2)); } 						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1], 1.5, { autoAlpha:1 }), 1 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1], 5, { scaleX:2.7, scaleY:2.7, ease:Quart.easeInOut }), .5 );						wheelTimelines[4].addCallback( toggleRRComboAnimControl, 4 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1].comboBuild.Foreground, .7, { autoAlpha:0 }), 10.5 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1].comboBuild.Midground, .7, { autoAlpha:0 }), 10.5 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1].comboBuild.Background, .35, { autoAlpha:0 }), 10.85 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[0], 1, { scaleX:.31, scaleY:.31 }), 11 );  //, onUpdate: function(){ trace("scale: "+ rrComboZoomBuild[0].scaleX+"   % "+wheelPercent.toFixed(2)); } 						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1], 1, { scaleX:.31, scaleY:.31 }), 11 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[1], .2, { autoAlpha:0 }), 11.8 );						wheelTimelines[4].insert( TweenLite.to( rrComboZoomBuild[0], .1, { autoAlpha:0 }), 11.9 );						wheelTimelines[4].addCallback( toggleRecedeRRComboOculus, 12 );						wheelTimelines[4].addCallback( toggleRecedeRRComboOculus, 13 );						wheelTimelines[4].addCallback( toggleTimeTempo, 13, [.05, .01]);						wheelTimelines[4].addCallback( toggleTimeTempo, 18, [.01, .05]);						wheelTimelines[4].insert( TweenLite.to(popPanel[panelID], .5, { rotation: 0, ease:Quad.easeOut, onUpdate:popPanel[panelID].rotateOthers, onStart:function(){popPanel[panelID].populateTLField( xmlRoot[currentID].HEAD, xmlRoot[currentID].BODY); }, onComplete:function(){  panelID = 1- panelID;    }}), 13 );						wheelTimelines[4].addCallback( noFunction, 18 );						sumDelay=13;					} else {						TweenLite.to(popPanel[panelID], 1.75, { rotation: 0, ease:Quad.easeOut, onUpdate:popPanel[panelID].rotateOthers, onStart:function(){popPanel[panelID].populateTLField( xmlRoot[currentID].HEAD, xmlRoot[currentID].BODY); }, onComplete:function(){  panelID = 1- panelID;    }});  // 						wheelScale[4] = .25;					}					var zoomable:Boolean;					var duration:Number;					if (picCount==1 && xmlRoot[currentID].ZOOMABLE.length()==1) {  // is a zoomable picture...create wheel zoom timeline, send out pic cart, then launch occulus picCart should have wheel icon 						dispatchCart(xmlRoot[currentID].PHOTO[0].attributes(), false, true );						oculusCartID= cartID; 						TweenLite.delayedCall(2.5, dispatchPhotoOculus );							TweenLite.delayedCall(5, activateZoom );							activeTimeline = wheelTimelines[4];						wheelPercent = 0;						wheelFunctions[4] = noFunction;// traceWheel;						wheelActive=false;					} else {						thisPicID=0;						if (levelID!=4 || Aid !=1 || Sid != 1 || Pid!=3) {							trace("goo");							trace("currentID: "+currentID, " thisPicID: "+thisPicID);							trace("xmlRoot: "+ xmlRoot[currentID].PHOTO[thisPicID].attributes());							dispatchCart( xmlRoot[currentID].PHOTO[thisPicID].attributes(), picCount>1 ? true : false, false );// create wheel photo browsing timeline,  launch timeline with first picCart image,  picCart should have wheel icon							wheelTimelines[4].addCallback( function(){  trace("what?"); wheelScale[levelID] = (1/picCount) * (xmlRoot[currentID].PHOTO[thisPicID].attributes()[1]<0? .175 : .25) ; trace(wheelScale[levelID]); }, .0+PicID+sumDelay );						}												var rotationTarget:Number;// =15;						var picKey:uint; 						for (var PicID:uint = 0; PicID<picCount-1; PicID++) {							picKey = (PicID+(1-cartID))%2;							wheelTimelines[4].addCallback( loadCart, .0+PicID+sumDelay, [picKey, PicID] );							wheelTimelines[4].insert( TweenLite.to(picCart[picKey], .725, { armsTarget: 0, ease: Quint.easeOut, onUpdate:picCart[picKey].updateCarriageBits }), .0+PicID+sumDelay );							wheelTimelines[4].insert( TweenLite.to(picCart[picKey], .8, { rotation: Number(xmlRoot[currentID].PHOTO[thisPicID].attributes()[1]), ease: Quad.easeInOut, onUpdate:picCart[picKey].updateCarriageBits }), .0+PicID+sumDelay );							wheelTimelines[4].insert( TweenLite.to(picCart[picKey], .5,  { pivotAsset:0, ease:Quad.easeOut, onUpdate:picCart[picKey].updateCarriageBits }), .1+PicID+sumDelay);							wheelTimelines[4].insert( TweenLite.to(picCart[1-picKey], .725, { armsTarget: -30, ease: Quint.easeIn, onUpdate:picCart[1-picKey].updateCarriageBits }), .3+PicID+sumDelay );							wheelTimelines[4].insert( TweenLite.to(picCart[1-picKey], .8, { rotation: 60, ease: Quad.easeInOut, onUpdate:picCart[1-picKey].updateCarriageBits }), .3+PicID+sumDelay );							wheelTimelines[4].insert( TweenLite.to(picCart[1-picKey], .5,  { pivotAsset:-70, ease:Quad.easeIn, onUpdate:picCart[1-picKey].updateCarriageBits }), .4+PicID+sumDelay);						} 						wheelTimelines[4].addCallback( function(){ if (mapArea.getChildIndex(picCart[0]) < mapArea.getChildIndex(picCart[1]) ) mapArea.swapChildren(mapArea.carriageA, mapArea.carriageB); }, wheelTimelines[4].totalDuration-.5  );						activeTimeline = wheelTimelines[4];						wheelFunctions[4] = noFunction;						wheelPercent = 0;						reactivateWheel(); 					}					zeroWheel();					wheelCurrentTimes[levelID]=wheelLastTimes[levelID]=0;				}				selectedOLEDid = theID;			}						trace(".-* : "+1-panelID);			popPanel[1-panelID].popDown();		}		private function loadCart(theCartID:int, loadID:int):void {			trace("loadCart");			wheelChange>=0 ? loadID++ : loadID--;			if (mapArea.getChildIndex(picCart[theCartID]) < mapArea.getChildIndex(picCart[1-theCartID]) ) mapArea.swapChildren(mapArea.carriageA, mapArea.carriageB);			if ( loadID >= 0 && loadID < picCount ) {				trace("autoload: "+loadID);				trace(" loadID<(picCount-1): "+ String(loadID<(picCount-1)));				trace("picurl: "+xmlData.ACT[Aid].SCENE[Sid].PART[Pid].PHOTO[loadID].attributes()[0]);				var extendArm:Number = Number(xmlData.ACT[Aid].SCENE[Sid].PART[Pid].PHOTO[loadID].attributes()[1] ) == 15 ? -47 : -60 ;				picCart[theCartID].loadforLaunch( xmlData.ACT[Aid].SCENE[Sid].PART[Pid].PHOTO[loadID].attributes()[0], xmlData.ACT[Aid].SCENE[Sid].PART[Pid].PHOTO[loadID].attributes()[1], extendArm, loadID<(picCount-1), false )			}		}				private function dispatchCart(picAttributes:XMLList, showMore:Boolean, showZoom:Boolean):void {			trace("dispatchCart()");			var extendArm:Number;			thisPicURL = picAttributes[0];			if (mapArea.getChildIndex(picCart[cartID]) < mapArea.getChildIndex(picCart[1-cartID]) ) mapArea.swapChildren(mapArea.carriageA, mapArea.carriageB);			var duration:Number = 0;			if (picCart[cartID].rotation <60) {				trace("");				trace("                  ***");				trace("");				duration = (60-picCart[cartID].rotation)*.03;				TweenLite.to( picCart[cartID], duration, { rotation: 60, ease: Quad.easeInOut, onUpdate:picCart[cartID].updateCarriageBits } );				TweenLite.to( picCart[cartID], duration*.5,  { delay:duration*.16, pivotAsset:-70, ease:Quad.easeIn, onUpdate:picCart[cartID].updateCarriageBits } );			}			trace("");			trace( "noActiveTween? "+noActiveTween );			trace( "this Pic: "+thisPicURL, " last Pic: "+lastPicURL );			if ( thisPicURL != null ) {				if ( noActiveTween && thisPicURL != lastPicURL ) {					lastPicURL=thisPicURL;					suspendForTween();					trace("dispatched:  "+cartID+"  picurl: "+thisPicURL);					extendArm = Number(picAttributes[1] ) == 15 ? -47 : -60 ;					trace("extendArmTo: "+extendArm);					TweenLite.delayedCall(duration, function(){  trace("skip"); picCart[cartID].loadLaunch( thisPicURL, Number(picAttributes[1]), extendArm, showMore, showZoom );  });					TweenLite.delayedCall(duration+2.5, function(){ cartID= 1-cartID; resumeAfterTween(); } );										picCart[1-cartID].rollCarriageTo(60);				}			} else if (Aid==1) {				resumeAfterTween(); 				timeline.incrementActive(); 			}		}		public function traceWheel():void { trace("currentTime: "+activeTimeline.currentProgress) }		public function noFunction():void { }				private function dispatchPhotoOculus():void {			TweenLite.to(ocularArm.knoblever, 1, { rotation: 0 } );			trace("dispatchPhotoOculus");			ocularArm.emergeForPhoto();			photoOculusExtended = true;			updateOculus();			oculens.visible = true;			activateArmatureUpdates();		}		private function recedePhotoOculus():void {			trace("recedePhotoOculus");			picCart[oculusCartID].removeZoomable();			TweenLite.delayedCall(.25, ocularArm.recedeFromPhoto );				activateArmatureUpdates();			if (rrComboZoomBuild[0].visible || rrComboZoomBuild[1].visible) {				TweenLite.to( rrComboZoomBuild[0], .5, { autoAlpha:0 } );				TweenLite.to( rrComboZoomBuild[1], .5, { autoAlpha:0 } );			}		}		private function autoRetractOcularArm():void {			TweenLite.to(ocularArm.knoblever, 1, { rotation: 50 } );			if (armatureRetractable) ocularArm.play();		}		private function toggleRecedeRRComboOculus():void {			trace("toggleRecedeRRComboOculus % "+ wheelPercent);			if (( wheelChange>0 && wheelPercent<70) || (wheelChange<0 && wheelPercent>70 )) {				wheelScale[3] = .02;				wheelFunctions[4] = wheelRecedeRRComboOculus;				activateArmatureUpdates();  			} else {				trace("noFunction");				//if ( wheelChange > 0 && ocularArm.currentFrame < 94 ) {				if ( wheelChange > 0 && ocularArm.currentFrame < 78 ) {					activateArmatureUpdates();					TweenLite.to(ocularArm.knoblever, 1, { rotation: 50 } );					ocularArm.play();					wheelFunctions[4] = noFunction;				} else if ( wheelChange <0 && ocularArm.currentFrame > 58 ) {					TweenLite.to(ocularArm.knoblever, 1, { rotation: 50 } );					activateArmatureUpdates();					ocularArm.theCurrentFrame = ocularArm.currentFrame;					var tweenLength:Number = (ocularArm.theCurrentFrame-58)/30;					TweenLite.to( ocularArm, tweenLength, { theCurrentFrame:58, onUpdate:function(){ ocularArm.gotoAndStop( ocularArm.theCurrentFrame ) }, onComplete:function(){  } });					}				ocularArm.updateArmature();			}		}		private function dispatchRRBridgeOculus():void {			trace("dispatchOculus");			ocularArm.emergeForRRBridge();			TweenLite.to(ocularArm.knoblever, 1, { rotation: 0 } );			rrBridgeOculusExtended = true;			ocularArm.updateArmature();			updateOculus();			oculens.visible = true;			activateArmatureUpdates();		}						private function recedeRRBridgeOculus():void {			trace("recedeRRBridgeOculus");			activateArmatureUpdates();			TweenLite.to(ocularArm.knoblever, 1, { rotation: 50 } );			trace("ocularArm.currentFrame"+ocularArm.currentFrame);			if (wheelTimelines[4].currentProgress > 0 && wheelTimelines[4].currentProgress<.6676) {				trace("A")				armatureRetractable = true;				wheelTimelines[4].timeScale = wheelTimelines[4].currentProgress*10;				wheelTimelines[4].reverse();			} else if ( ocularArm.currentFrame >10 && ocularArm.currentFrame < 58 ){				ocularArm.theCurrentFrame = ocularArm.currentFrame;				var tweenLength:Number = (ocularArm.theCurrentFrame-10)/15;				TweenLite.to( ocularArm, tweenLength, { theCurrentFrame:10, onUpdate:function(){ ocularArm.gotoAndStop( ocularArm.theCurrentFrame ) }, onComplete:function(){  } });				} else {				trace("B")				ocularArm.play();			}		}				private function updateOculus(e:Event=null):void {			trace(".");    //trace("updateOculus");			oculens.updateLens( ocularArm.lensPoint() );		}		private function activateArmatureUpdates():void {			trace("activateArmatureUpdates");			ocularArm.activateFrameUpdates();			ocularArm.addEventListener("oculusExtended", deactivateExtendedArmatureUpdates);			ocularArm.addEventListener("oculusHidden", deactivateArmatureUpdates);			this.addEventListener(Event.ENTER_FRAME, updateOculus);		}				private function deactivateExtendedArmatureUpdates(e:Event):void {			trace("deactivateExtendedArmatureUpdates");			trace("oculusExtended: true");			//if (ocularArm.knoblever.rotation<50) TweenLite.to(ocularArm.knoblever, .5, { rotation: 50 } );			//photoOculusExtended = false;			//rrBridgeOculusExtended = false;			ocularArm.removeEventListener("oculusExtended", deactivateExtendedArmatureUpdates);			ocularArm.removeEventListener("oculusHidden", deactivateArmatureUpdates);			//this.removeEventListener(Event.ENTER_FRAME, updateOculus);			ocularArm.updateArmature();			ocularArm.deactivateFrameUpdates();		}				private function deactivateArmatureUpdates(e:Event):void {			trace("deactivateArmatureUpdates");			trace("oculusExtended: false");			if (ocularArm.knoblever.rotation<50) TweenLite.to(ocularArm.knoblever, .5, { rotation: 50 } );			photoOculusExtended = false;			rrBridgeOculusExtended = false;			ocularArm.removeEventListener("oculusExtended", deactivateExtendedArmatureUpdates);			ocularArm.removeEventListener("oculusHidden", deactivateArmatureUpdates);			this.removeEventListener(Event.ENTER_FRAME, updateOculus);			ocularArm.updateArmature();			ocularArm.deactivateFrameUpdates();			oculens.visible = false;		}		private function getThisYear():uint {			var my_date:Date = new Date();			trace("The year is: "+my_date.getFullYear());			return my_date.getFullYear();		}		private function rrYearToPercent(theYear:Number):Number { return (theYear-1840)/timespanMultiplier; }		public function rotationAngle(dx:Number, dy:Number):Number { return Math.atan2(dy, dx) * k; 	}		private function theDistance(x1:Number, y1:Number, x2:Number, y2:Number):Number { return Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) ); }		private function myFunction() { }				public function populateArrays():void {			iconSequenceID = new Array();			activeOLEDs = new Array(false, false, false, false);			popPanel = new Array( mapArea.popupPanelA, mapArea.popupPanelB);			picCart = new Array( mapArea.carriageA, mapArea.carriageB);			iconMCs = new Array( mapArea.redIcon, mapArea.yellowIcon, mapArea.blueIcon, mapArea.greenIcon);			lightConeMatrix = new Array(); 			darkConeMatrix = new Array(); 			coneMCs = new Array( mapArea.redCone, mapArea.yellowCone, mapArea.blueCone, mapArea.greenCone, mapArea.redCone2, mapArea.yellowCone2, mapArea.blueCone2, mapArea.greenCone2, mapArea.blueCone3 );			dotMCs = new Array( mapArea.redDot, mapArea.yellowDot, mapArea.blueDot, mapArea.greenDot, mapArea.redDot2, mapArea.yellowDot2, mapArea.blueDot2, mapArea.greenDot2, mapArea.blueDot3 );			commonItems = new Array( mapArea.redDot, mapArea.yellowDot, mapArea.blueDot, mapArea.greenDot, mapArea.redDot2, mapArea.yellowDot2, mapArea.blueDot2, mapArea.greenDot2, mapArea.blueDot3, mapArea.redCone, mapArea.yellowCone, mapArea.blueCone, mapArea.redCone2, mapArea.yellowCone2, mapArea.blueCone2, mapArea.greenCone2, mapArea.blueCone3, mapArea.greenCone, mapArea.redIcon, mapArea.yellowIcon, mapArea.blueIcon, mapArea.greenIcon); //, mapArea.spinToBegin			soGrowsItems = new Array( mapArea.cableRailLine, mapArea.elevatedRailLine, mapArea.electricStreetcarLines, mapArea.roads, mapArea.piercesAddition, mapArea.areaSGe3, mapArea.areaSGs1, mapArea.areaSGa2, mapArea.areaSGe1, mapArea.areaSGa1, mapArea.areaSGa3, mapArea.areaSGex1, mapArea.roads );			roadRailsItems = new Array( mapArea.areaRRa3, mapArea.rra3, mapArea.rrb1, mapArea.rrb2, mapArea.rrc1, mapArea.rrc3, mapArea.rrd2, mapArea.rrd4, mapArea.sc04combo.sc04CrseBG, mapArea.sc04combo.sc04BigAnim );			rra3Labels = new Array( mapArea.rra3.r1,mapArea.rra3.r2,mapArea.rra3.r3,mapArea.rra3.r4,mapArea.rra3.r5,mapArea.rra3.r6 );			rrcLabels = new Array( mapArea.rrc1.rt12, mapArea.rrc1.rt15, mapArea.rrc1.rt20, mapArea.rrc1.rt29, mapArea.rrc1.rt50, mapArea.rrc1.sr20a, mapArea.rrc1.sr20b, mapArea.rrc3.sr75a, mapArea.rrc3.sr75b,mapArea.rrd2.fr29a, mapArea.rrd2.fr29b, mapArea.rrd4.fr20, mapArea.rrd4.fr75 );			rrComboZoomBuild = new Array( mapArea.sc04combo.sc04CrseBG, mapArea.sc04combo.sc04BigAnim );			wheelTimelines = new Array( wheelTimeline0, wheelTimeline1, wheelTimeline2, wheelTimeline3, wheelTimeline4, wheelTimeline5 );//levelID			rrTransTimelines = new Array( rrTransTimeline1, rrTransTimeline2, rrTransTimeline3 ); 			wheelFunctions = new Array( new Function(), new Function(), new Function(), new Function(), new Function(), new Function() );			goToActSequence =  new Array( soGrowsSequences, roadsAndRailsSequence, downtownSequences );			wheelLastTimes = new Array( 0, 0, 0, 0, 0, 0 );			titles = timeline.timelineLensed.titles;			timelineTitles = new Array( titles.turn_back_time, titles.so_grows_sioux_city, titles.cable_railway, titles.elevated_railway, titles.electric_streetcar, titles.automobile, titles.roads_and_rails, titles.discover_downtown, titles.third_street, titles.fourth_street, titles.sixth_street, titles.pearl_street );		}		private function wheelTimelineComplete():void { }				private function selectCableRailway():void { }		private function launchAssets():void { }		private function OLED1clicked(e:Event):void { if (activeOLEDs[0]) toggleOLED(0); }		private function OLED2clicked(e:Event):void { if (activeOLEDs[1]) toggleOLED(1); }		private function OLED3clicked(e:Event):void { if (activeOLEDs[2]) toggleOLED(2); }		private function OLED4clicked(e:Event):void { if (activeOLEDs[3]) toggleOLED(3); }				private function navigateBack(e:Event):void {			if (levelID>0) levelID--;			trace("levelID: "+levelID);			if (mapArea.spinToBegin.y>-25) TweenLite.to( mapArea.spinToBegin, .75, { y: -25, ease:Quad.easeIn });			if (Aid!=1 || levelID!=3) {				wheelActive = false;			}			timeline.decrementActive();			switch (levelID) { 				case 0 : xmlRoot = xmlData.ACT; break;				case 1 : xmlRoot = xmlData.ACT; hide4MainSequence(iconMCs); break;//mainSequence();  				case 2 : xmlRoot = xmlData.ACT[Aid].SCENE; 						Aid==1 ? hide4MainSequence( commonItems.concat(roadRailsItems) ) : hide4ActSequence(commonItems.concat(soGrowsItems).concat(roadRailsItems));					break;//actSequence(Aid)				case 3 : 						trace(" +++ >>  level: "+levelID+"  currentID: "+currentID+"  Aid: "+Aid+"  Sid: "+Sid+"  Pid: "+Pid);						xmlRoot = xmlData.ACT[Aid].SCENE;						activeTimeline = wheelTimelines[3];						wheelPercent = activeTimeline.currentProgress*100;						controller.wheelValue = wheelLastTimes[levelID];						dispatchCart( xmlRoot[Sid].PHOTO.attributes(), false, false );						if (Aid!=1) {							popPanel[panelID].populateTLField( xmlRoot[Sid].HEAD, xmlRoot[Sid].BODY );							TweenLite.to(popPanel[panelID], 1.75, { rotation: 0, ease:Quad.easeOut, onUpdate:popPanel[panelID].rotateOthers, onComplete:function(){  panelID = 1- panelID; } });						}						TweenLite.to( iconMCs[selectedOLEDid].brighten, 1, { autoAlpha:0 } );						TweenMax.to(coneMCs[selectedOLEDid], .4, {colorMatrixFilter:{matrix:darkConeMatrix[selectedOLEDid]}});						TweenMax.to(coneMCs[selectedOLEDid+4], .4, {colorMatrixFilter:{matrix:darkConeMatrix[selectedOLEDid]}});						if (photoOculusExtended) recedePhotoOculus();						if (rrBridgeOculusExtended) recedeRRBridgeOculus();						xmlRoot = xmlData.ACT[Aid].SCENE[Sid].PART;						selectedOLEDid = NaN;					break;				case 4 : xmlRoot = xmlData.ACT[Aid].SCENE[Sid].PART; break;			}			picCart[1-cartID].rollCarriageTo(60);			popPanel[1-panelID].popDown();		}		private function wheelUpdated(e:Event):void {			if ( wheelActive ) {  				wheelCurrentTimes[levelID] = controller.wheelValue;				wheelChange = wheelCurrentTimes[levelID]-wheelLastTimes[levelID];				wheelLastTimes[levelID] = wheelCurrentTimes[levelID];				wheelPercent+=wheelChange*wheelScale[levelID];				wheelPercent = ( wheelPercent<0 ) ? 0 : wheelPercent;				wheelPercent = ( wheelPercent>100 ) ? 100 : wheelPercent;				wheelFunctions[levelID]();				activeTimeline.currentProgress = wheelPercent*.01;			}		}	}}