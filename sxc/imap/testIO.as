package com.nestor.sxc.imap {		import flash.display.MovieClip;	import com.nestor.sxc.imap.UDPController;	import flash.events.Event;	import flash.events.MouseEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.events.TweenEvent;	import flash.events.DatagramSocketDataEvent;	import com.nestor.tools.cfgloader;			public class testIO extends MovieClip {		var cfg:XML;		var socket:UDPController;		public var n:String;		public function testIO() {			// constructor code			var cfg:cfgloader=new cfgloader("testIO.cfg");			cfg.addEventListener(Event.COMPLETE,cfgLoaded);											}		private function cfgLoaded(e:Event):void		{			cfg=e.target.cfg;			//trace("Config::"+cfg);			socket=new UDPController(cfg.net.host,Number(cfg.net.tx),Number(cfg.net.rx));			addListeners();		}						private function addListeners():void{			socket.addEventListener("oled1up",btnHandler);			socket.addEventListener("backIsup",btnHandler);			oled1.btn_mc.addEventListener(MouseEvent.MOUSE_UP, oled1pressed);			oled2.btn_mc.addEventListener(MouseEvent.MOUSE_UP, oled2pressed);			oled3.btn_mc.addEventListener(MouseEvent.MOUSE_UP, oled3pressed);			oled4.btn_mc.addEventListener(MouseEvent.MOUSE_UP, oled4pressed);			led.addEventListener(Event.CHANGE, ledpressed);			brake_mc.go.addEventListener(MouseEvent.MOUSE_UP, brakeCurve);			brake_mc.now.addEventListener(Event.CHANGE, brakeJump);			socket.addEventListener("hello", socketSpeaks);			year.addEventListener(Event.CHANGE, yearChanged);			brake_mc.bump.addEventListener(MouseEvent.MOUSE_UP, bumpit);			brake_mc.stops.addEventListener(MouseEvent.MOUSE_UP,stopit);						socket.addEventListener("wheelChanged",wheelHandler);		}		private function btnHandler(e:Event):void		{			//traceOut(e.toString());		}		private function yearChanged(e:Event):void{			socket.setYear(e.target.value);		}		private function wheelHandler(e:Event):void		{			wheel_val.text+=e.target.deltaWheel+"\n";			wheel_avg.text+= e.target.avg+"\n";										//trace("Scrolling");				wheel_val.scrollV+=1;				wheel_avg.scrollV+=1;												//traceOut(e.target.avg+","+e.target.deltaWheel);		}				private function oled1pressed(e:MouseEvent):void{									socket.setImg(0, Number(oled1.val.value));		}				private function oled2pressed(e:MouseEvent):void{			socket.setImg(1, Number(oled2.val.value));		}		private function oled3pressed(e:MouseEvent):void{			socket.setImg(2, Number(oled3.val.value));		}		private function oled4pressed(e:MouseEvent):void{			socket.setImg(3, Number(oled4.val.value));		}		private function ledpressed(e:Event):void{			socket.setLed(e.currentTarget.toggleState);		}						private function brakeCurve(e:MouseEvent):void{			var _yoyo:Boolean = brake_mc.yoyo.toggleState;			var target:Number=brake_mc.to.value;			var time:Number=brake_mc.time.value;			var _ease:String=brake_mc.tweens.value+brake_mc.eases.value;			var _repeat:Number;			if (_yoyo)_repeat=1;			else _repeat = 0;			TweenMax.to(this, time, {n:target,ease:_ease,onUpdateListener:tweening, yoyo:_yoyo, repeat:_repeat});		}				private function brakeJump(e:Event):void{						var target:Number=brake_mc.now.value;			socket.setBrake(target);		}				private function bumpit(m:Event){			socket.bump(brake_mc.amp.value,brake_mc.dur.value);		}				private function stopit(m:Event){			//trace(m.currentTarget);			if (m.target.name == "left"){				socket.stopLeft();			}else{				socket.stopRight();			}					}				private function tweening(t:TweenEvent):void		{			socket.setBrake(Number(n));		}			private function socketSpeaks(e:Event):void		{			//trace("Hello, UDP. "+e.target.msg);			var UDPmsg:String = "Message received on port "+cfg.net.rx+"::\n   "+e.target.msg			//traceOut(UDPmsg);		}				private function traceOut(s:String):void		{			traceout.appendText( s+"\n");		}	}	}