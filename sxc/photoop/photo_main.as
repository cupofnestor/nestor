package com.nestor.sxc.photoop  {	import flash.events.MouseEvent;	import flash.events.Event;	import flash.errors.*;	import flash.events.*;	import flash.display.MovieClip;	import flash.net.NetConnection;	import flash.net.Responder;	import flash.filesystem.*;	import com.nestor.elements.kiosk;	import com.nestor.tools.cfgloader;		public class photo_main extends  kiosk{		var logFile:File;		var logger:FileStream = new FileStream();		var gw:NetConnection = new NetConnection();		var host:String;		var gatewayPath:String;		var imgPath:String;		var image:String;		var gateway:String = host+gatewayPath;  //set in cfg		var snapRes:Responder;						public function photo_main() {			initUI();			var cfgLoad:cfgloader=new cfgloader("photoop.cfg");			cfgLoad.addEventListener(Event.COMPLETE, initVars);		}								private function initVars(e:Event):void		{			e.target.removeEventListener(Event.COMPLETE, initVars);			var cfg:XML=e.target.cfg;						logFile = File.desktopDirectory.resolvePath("flashlogs/log.txt");			log("PhotoOp says hello");			host = cfg.NET.HOST;			gatewayPath = cfg.NET.GATEWAY;			imgPath=cfg.NET.IMGPATH.toString();			trace("img:"+imgPath);			gateway = host+gatewayPath;  //set in cfg			trace("attempting to connect to:"+gateway);			gw.connect(gateway);			netSetup();		}						private function netSetup():void		{			 snapRes = new Responder(onSnapResult,onFault);			 gw.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);		}		function netStatusHandler(n:NetStatusEvent):void{			trace("Error: "+n.info.code);			log(n.info.code);		}		function onSnapResult(_r:Object):void{			trace("suxcess");			showPhoto(String(_r));		}				function onFault(_r:Object):void{			for(var i in _r)trace(_r[i]);		}						private function initUI():void		{			knobby.addEventListener(MouseEvent.MOUSE_UP, three);		}				private function three(e:Event){			knobby.removeEventListener(MouseEvent.MOUSE_UP, three);			trace("THREE");			if(windw.onStage)windw.killImg();			count3.addEventListener(Event.COMPLETE, two);			count3.blink();		}				private function two(e:Event){			trace("knob pushed");			count3.removeEventListener(Event.COMPLETE, two);			count2.addEventListener(Event.COMPLETE, one);			count2.blink();		}		private function one(e:Event){			trace("knob pushed");			count2.removeEventListener(Event.COMPLETE, two);			count1.addEventListener(Event.COMPLETE, go);			try{				gw.call("take.snap",snapRes);			}catch(error:Error){				trace("Error was thrown: "+error);			}			count1.flash();					}				private function go(e:Event){			trace("GO!");			count1.removeEventListener(Event.COMPLETE, go);					}				private function showPhoto(photo:String):void		{			image=imgPath+photo;			windw.loadImg(host+image);			windw.addEventListener(Event.COMPLETE, sendEmailOn);		}		private function sendEmailOn(e:Event):void		{			windw.removeEventListener(Event.COMPLETE, sendEmailOn);			email.onStage();			shadow.aChange(1);		}				private function log(m:Object):void		{			var ts:Date = new Date();			var err:String=String(ts)+" :: "+String(m)+"\n";			logger.openAsync(logFile, FileMode.APPEND);			logger.writeUTFBytes(err);			logger.close();		}					}	}