	package com.nestor.sxc.photoop  {	import flash.events.MouseEvent;	import flash.events.Event;	import flash.errors.*;	import flash.events.*;	import flash.display.MovieClip;	import flash.net.NetConnection;	import flash.net.Responder;	import flash.filesystem.*;	import com.nestor.elements.kiosk;	import com.nestor.tools.cfgloader;	import com.nestor.tools.AlertEvent;	import com.nestor.elements.popover;	import flash.utils.Timer;		public class photo_main extends  kiosk{		var logFile:File;		var alertL:Number=310;		var logger:FileStream;		var gw:NetConnection = new NetConnection();		var host:String;		var gatewayPath:String;		var imgPath:String;		var image:String;		var gateway:String = host+gatewayPath;  //set in cfg		var snapRes:Responder;		var payoff:String;		//var tout:Timer;		var idleMess:String;				public function photo_main() {						try{			logger = new FileStream()			}catch(e:IOError){				trace("Error:: "+e.toString());			}			initUI();			var cfgLoad:cfgloader=new cfgloader("photoop.cfg");			cfgLoad.addEventListener(Event.COMPLETE, initVars);			addEventListener(AlertEvent.ALERT, alert);									addEventListener("debugEvent", debugFunction);					}				private function debugFunction(e:Event):void		{			windw.loadImg('test.jpg');		}				/*private function hardReset():void		{			 snapRes = null;			 gw.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			 initUI();			 email.offStage();			 shadow.aChange(0);			 //timer reset		}*/		private function resetEmail(e:Event)		{			reset();		}				override public function reset():void		{			 snapRes = null;			 disableTimeout();			 gw.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			 email.offStage();			 shadow.aChange(0);			 windw.killImg();			 initUI();			 netSetup();			 //timer reset		}				private function initVars(e:Event):void		{						e.target.removeEventListener(Event.COMPLETE, initVars);			var cfg:XML=e.target.cfg;			if(Boolean(cfg.MODE.FULLSCREEN))goFull();			if(!Boolean(cfg.MODE.MOUSE))hideMouse();			payoff = cfg.PAYOFF;			idleMess=cfg.IDLE;			/*cfg.LOGFILE*/			logFile = File.documentsDirectory.resolvePath( cfg.LOGFILE);			trace("LOG:"+logFile.nativePath);			log("PhotoOp says hello");			host = cfg.NET.HOST;			gatewayPath = cfg.NET.GATEWAY;			imgPath=cfg.NET.IMGPATH.toString();			trace("img:"+imgPath);			gateway = host+gatewayPath;  //set in cfg			trace("attempting to connect to:"+gateway);			gw.connect(gateway);			netSetup();			this.timeoutSet(cfg.TIMEOUT);											}						private function netSetup():void		{			 snapRes = new Responder(onSnapResult,onFault);			 gw.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);		}				function netStatusHandler(n:NetStatusEvent):void{			trace("Error: "+n.info.code);			log(n.info.code);		}				function onSnapResult(_r:Object):void{			trace("suxcess:"+_r);			showPhoto(String(_r))					}		function onMailResult(_r:Object):void{			trace("suxcess");			emailComplete();					}				function onFault(_r:Object):void{			for(var i in _r)trace(_r[i]);		}								private function initUI():void		{			knobby.addEventListener("knobPushed",three);					}				/*private function initTout(t:Number):void		{			var span:Number=t*1000;			tout=new Timer(t,0);			tout.addEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, timerReset);			tout.start();		}*/				/*private function timerReset(m:MouseEvent):void		{			tout.reset();			tout.start();		}*/				override public function timeoutHandler(e:Event):void		{			//tout.reset();			trace("Application timwoutttwetwq");			var idleAlert:popover=new popover(idleMess,"OK",5,alertL,centerY);			addChild(idleAlert);			idleAlert.addEventListener(Event.COMPLETE, killIdle);			idleAlert.addEventListener(Event.CANCEL, idleReset);			idleAlert.on();		}				private function killIdle(e:Event):void{			e.target.removeEventListener(Event.CANCEL, idleReset);			e.target.removeEventListener(Event.COMPLETE, killIdle);			var idleMC = MovieClip(e.target);			removeChild(idleMC);			idleMC=null;					}				private function idleReset(e:Event)		{			e.target.removeEventListener(Event.CANCEL, idleReset);			e.target.removeEventListener(Event.COMPLETE, killIdle);			var idleMC = MovieClip(e.target);			removeChild(idleMC);			idleMC=null			reset();					}						private function three(e:Event){			knobby.removeEventListener("knobPushed", three);			trace("THREE");			if(windw.onStage)windw.killImg();			count3.addEventListener(Event.COMPLETE, two);			count3.blink();		}				private function two(e:Event){						count3.removeEventListener(Event.COMPLETE, two);			count2.addEventListener(Event.COMPLETE, one);			count2.blink();		}		private function one(e:Event){						count2.removeEventListener(Event.COMPLETE, two);			count1.addEventListener(Event.COMPLETE, go);			try{				gw.call("take.snap",snapRes);			}catch(error:Error){				trace("Error was thrown: "+error);			}			windw.loading();			count1.flash();					}				private function go(e:Event){			trace("GO!");			count1.removeEventListener(Event.COMPLETE, go);					}				private function showPhoto(photo:String):void		{		    image=imgPath+photo;			windw.loadImg(host+image);			windw.addEventListener(Event.COMPLETE, sendEmailOn);		}		private function sendEmailOn(e:Event):void		{			enableTimeout();			windw.removeEventListener(Event.COMPLETE, sendEmailOn);			email.onStage();			shadow.aChange(1);			email.addEventListener(TextEvent.TEXT_INPUT,sendMail);			email.addEventListener("reTake",reTake);			email.addEventListener(Event.CANCEL,resetEmail);		}				private function reTake(e:Event):void{			shadow.aChange(0);			email.removeEventListener(TextEvent.TEXT_INPUT,sendMail);			email.removeEventListener("reTake",reTake);			three(new Event(Event.COMPLETE));		}				private function sendMail(t:TextEvent):void		{			email.removeEventListener(TextEvent.TEXT_INPUT,sendMail);			email.removeEventListener("reTake",reTake);			snapRes = null;			snapRes = new Responder(onMailResult,onFault);			gw.call("take.mail", snapRes,t.text, image, t.target.logAdd);				}				private function emailComplete():void		{			var compAlert:popover=new popover(payoff,"OK",10,alertL,centerY);			addChild(compAlert);			compAlert.addEventListener(Event.COMPLETE, compKill);			compAlert.addEventListener(Event.CANCEL, compKill);			compAlert.on();					}				private function compKill(e:Event):void{			e.target.removeEventListener(Event.COMPLETE, compKill);			e.target.removeEventListener(Event.CANCEL, compKill);			var tmpMC = MovieClip(e.target);			removeChild(tmpMC);			tmpMC=null;			reset();		}				private function log(m:Object):void		{						var ts:Date = new Date();			var err:String=String(ts)+" :: "+String(m)+"\n";			//pop(err);						try{			logger.openAsync(logFile, FileMode.APPEND);			}catch(e:Error){				trace("Error:: "+e.toString());			}									logger.writeUTFBytes(err);			logger.close();		}				private function alert(a:AlertEvent):void		{			pop(a.text);		}				private function pop(s:String):void{						var thisAlert:popover=new popover(s,"OK",55555,alertL,centerY);			addChild(thisAlert);			thisAlert.addEventListener(Event.COMPLETE, killPop);			thisAlert.on();					}				private function killPop(e:Event):void{			e.target.removeEventListener(Event.COMPLETE, killPop);			var popMC = MovieClip(e.target);			removeChild(popMC);			popMC=null;		}					}	}