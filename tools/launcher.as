package com.nestor.tools{    import flash.display.Sprite;    import flash.desktop.NativeProcess;    import flash.desktop.NativeProcessStartupInfo;    import flash.events.Event;    import flash.events.ProgressEvent;    import flash.events.IOErrorEvent;    import flash.events.NativeProcessExitEvent;    import flash.filesystem.File;        public class launcher extends Sprite    {		private var nativeProcessStartupInfo:NativeProcessStartupInfo;        private var file:File				private var script:String;		private var args:Array=[];        public var process:NativeProcess;        public function launcher(_s:String="launch.sh")        {            if(NativeProcess.isSupported)            {				script=_s;                setup();            }            else            {                trace("NativeProcess not supported.");            }        }                public function setup():void        {                 nativeProcessStartupInfo = new NativeProcessStartupInfo();            file = File.applicationDirectory.resolvePath(script);			            nativeProcessStartupInfo.executable = file;			            var processArgs:Vector.<String> = new Vector.<String>();            for each(var s:String in args){ processArgs.push(s);}            nativeProcessStartupInfo.arguments = processArgs;        }				public function launch()		{			process = new NativeProcess();            process.start(nativeProcessStartupInfo);			dispatchEvent(new Event("launched"));            process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);            process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);            process.addEventListener(NativeProcessExitEvent.EXIT, onExit);            process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);            process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);		}        public function onOutputData(event:ProgressEvent):void        {            trace("Got: ", process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable));         }                public function onErrorData(event:ProgressEvent):void        {            trace("ERROR -", process.standardError.readUTFBytes(process.standardError.bytesAvailable));         }                public function onExit(event:NativeProcessExitEvent):void        {            trace("Process exited with ", event.exitCode);			dispatchEvent(new Event("exited"));        }                public function onIOError(event:IOErrorEvent):void        {             trace(event.toString());        }				public function kill():void		{			(process.running) ? process.exit() : null ;		}    }}