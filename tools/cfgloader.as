package com.nestor.tools {	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.*;	import flash.errors.*;	public class cfgloader extends EventDispatcher{		public var cfg:XML;		public var err:IOError;				public function cfgloader(url:String) {			var req:URLRequest = new URLRequest(url);			var ldr:URLLoader = new URLLoader();			configureListeners(ldr);			try {				// statements				ldr.load(req);			} catch (_error:IOError) {				// statements				trace("::CFGLOADER::  IO ERROR REPORT :: "+_error);				err=_error;				dispatchEvent(new Event("errorReport"));			}				}				private function loadComplete(e:Event):void		{			cfg = new XML(e.target.data);			//trace(cfg);			this.dispatchEvent(new Event(Event.COMPLETE));		}						 private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, loadComplete);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }		private function openHandler(event:Event):void {            trace("cfgLoader openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("cfgLoader progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("cfgLoader securityErrorHandler: " + event);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            trace("cfgLoader httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("cfgLoader ioErrorHandler: " + event);        }	}	}