package com.nestor.elements {	import flash.display.MovieClip;	import flash.display.Loader;    import flash.events.*;    import flash.net.URLRequest;		public class pictureWindow extends MovieClip{		var wide:Number;		var high:Number;				public function pictureWindow():void		{			this.addEventListener(Event.ADDED_TO_STAGE, setup);		}				public function loadURL(url:String) {			var ldr:Loader = new Loader();            configureListeners(ldr.contentLoaderInfo);            ldr.addEventListener(MouseEvent.CLICK, clickHandler);            var imgURL:URLRequest=new URLRequest(url);            ldr.load(imgURL);			addChild(ldr);						                }				private function setup(e:Event):void		{			wide=e.target.width;			high=e.target.height;			//trace("Setup:"+wide+"/"+high);		}		private function fullScale(l:Loader):void		{			//trace(l.width+"/"+l.height);			var scale:Number;			scale= high/l.height;			/*if(l.width>=l.height && l.height<high)			{				scale = wide/l.width;				//trace("Width is greater, shorter than container.  scale: "+scale);			}			else			{				scale= high/l.height;				//trace("Height is greater.  scale: "+scale);			}						l.scaleX=l.scaleY=scale;			//l.x= (wide-l.height)/2 ;*/			l.scaleX=l.scaleY=scale;		}		        private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(Event.INIT, initHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(Event.UNLOAD, unLoadHandler);        }	        private function completeHandler(event:Event):void {            //trace("completeHandler: " + event);			fullScale(event.target.loader);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            //trace("httpStatusHandler: " + event);        }        private function initHandler(event:Event):void {            //trace("initHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            //trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            //trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            //trace("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);        }        private function unLoadHandler(event:Event):void {            //trace("unLoadHandler: " + event);        }        private function clickHandler(event:MouseEvent):void {            //trace("clickHandler: " + event);          //  var loader:Loader = Loader(event.target);            //loader.unload();        }	}	}