package{	import flash.display.*;	import flash.events.*;	import caurina.transitions.*; 	import flash.geom.Point;	import flash.utils.Timer;	import flash.ui.Mouse;	import com.nestor.elements.kiosk;		public class Dripcode extends kiosk	{		var zipCodeMeta:String;		var alert_mc:alert;		var local_mc:MovieClip;		public var reg_mc:MovieClip;		public var attract_mc:attract;		public var animation_mc:animation;		public var reg_meta:metaReg;		public var regLoader_mc:regLoader;		public var numMap_mc:numMap;		var reg_name:String;		var timeout:Timer;		var mouse:Boolean=false;		//var defMask_mc:defMask = new defMask();				public function Dripcode():void		{			addEventListener("debugEvent",debugHandler);			//this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;						//hucTransition();			goFull();			att();			//metaRegTransition();		}				private function debugHandler(e:Event):void		{			killall(new Event(Event.CANCEL));		}														private function att():void		{			timeout = new Timer(90000,1);			attract_mc=new attract();			addChild(attract_mc);			attract_mc.addEventListener(MouseEvent.MOUSE_DOWN,attTransition);		}				private function attTransition(e:MouseEvent):void		{			attract_mc.removeEventListener(MouseEvent.MOUSE_UP,attTransition);			attract_mc.kill();			attract_mc.addEventListener("dying",intro);					}								private function intro(e:Event):void		{			attract_mc.removeEventListener("dying",intro);			//removeChild(DisplayObject(e.target));			attract_mc = null;												//addChild(defMask_mc);			animation_mc = new animation();			addChild(animation_mc);			animation_mc.d1.addEventListener(dispatcher.FINISHED, animTransition);			animation_mc.addEventListener("stopped", resetTime);			animation_mc.addEventListener("continue", suspendTime);			timeout.reset();			timeout.stop();			timeout.addEventListener(TimerEvent.TIMER_COMPLETE,_timeoutHandler);					}				private function animTransition(e:Event):void		{						animation_mc.d1.removeEventListener(dispatcher.FINISHED, animTransition);			hucTransition();					}						private function hucTransition():void		{			animation_mc.kill();			numMap_mc = new numMap();			addChild(numMap_mc);			local_mc = new local();			addChild(local_mc);			local_mc.d1.addEventListener(dispatcher.LOADED, regLoad);			local_mc.addEventListener("query", suspendTime);			local_mc.keyPad.addEventListener("tooMany", resetTime);			//local_mc.err.addEventListener("dying", resetTime);			//timeout.addEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);			timeout.reset();			timeout.start();					}		private function resetTime(e:Event):void		{			//timeout.removeEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);			trace ("Reset Time");			timeout.stop();			timeout.reset();			timeout.start();			//timeout.addEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);					}				private function suspendTime(e:Event):void		{			trace("Timer stopped");			timeout.stop();								}				private function regLoad(e:Event):void		{									numMap_mc.kill();			zipCodeMeta = local_mc.zipCode;			reg_name = local_mc.zipMap.reg_name;			trace("Dripcode.reg_name= "+reg_name);			regLoader_mc = new regLoader(zipCodeMeta);			regLoader_mc.dLoaded.addEventListener(dispatcher.LOADED,regLoaded);			local_mc.d1.addEventListener(dispatcher.FINISHED, regTransition);			timeout.reset();			timeout.start();		}				private function regTransition(e:Event):void		{			var metaRegFromReg:Function = function metaRegFromReg(e:Event):void			{				reg_mc.kill();				metaRegTransition();			}			timeout.reset();			trace("Dripcode.regTransition, reg="+local_mc.zipMap.reg);			local_mc.kill();			reg_mc = new regional(reg_name, local_mc.zipMap.reg-1);						var regLabel:hucBlank = new hucBlank();			reg_mc.addChildAt(regLabel,0);									reg_mc.window_mc.addChild(regLoader_mc);			addChild(reg_mc);			regLabel.label.text = "Your Region";			regLabel.field.text = "#"+local_mc.zipMap.reg;			reg_mc.d1.addEventListener(dispatcher.FINISHED, metaRegFromReg);		}				private function regLoaded(e:Event):void		{			local_mc.btnActivate();		}				private function metaRegTransition(/*e:Event*/):void		{			timeout.reset();			var retBtn:regBtn2 = new regBtn2;			var reg2Load:Function = function reg2Load(e:Event):void			{				metaBtn_mc.kill();				reg_meta.meta_text.label.width /= 2;			}			var reg2Loaded:Function = function reg2Loaded(e:Event):void			{				trace("reg2Loaded");				addChild(retBtn);				retBtn.x=1150;				retBtn.y=670;				retBtn.addEventListener(MouseEvent.MOUSE_UP, metaRegFromReg);			}			var metaRegFromReg:Function = function metaRegFromReg(e:Event):void			{				reg_meta.kill();				retBtn.kill();				metaRegTransition();				timeout.reset();				timeout.start();			}			trace("Dripcode.MetaregTransition");						//reg_mc.kill();						reg_meta = new metaReg();			addChild(reg_meta);			reg_meta.meta_text.label.text = "Watershed Regions of the U.S.";			reg_meta.meta_text.label.width *= 2;			reg_meta.meta_text.hucField.text = " ";			reg_meta.meta_text.detail.field.text = "There are 18 regional watersheds in the continental United States, plus Alaska and Hawaii."+"\n"+"\n"+"Touch a region on the map to find out more about that area.";			var metaBtn_mc:metaBtn = new metaBtn();			reg_meta.addChild(metaBtn_mc);			metaBtn_mc.x = 1150;			metaBtn_mc.y=670;			metaBtn_mc.active_area.addEventListener(MouseEvent.MOUSE_UP, metaRegOut);						reg_meta.d1.addEventListener(dispatcher.LOAD, reg2Load);			reg_meta.d1.addEventListener(dispatcher.LOADED, reg2Loaded);			reg_meta.addEventListener("query", suspendTime);			//reg_meta.d1.addEventListener(dispatcher.FINISHED, reg2Transition);		}				private function metaRegOut(e:MouseEvent):void		{			reg_meta.kill();			hucTransition();		}				private function _timeoutHandler(e:TimerEvent):void		{			trace("timoutHandler");			//timeout.removeEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);			alert_mc = new alert();			this.addChild(alert_mc);			this.addEventListener(MouseEvent.MOUSE_DOWN, moreTime);			alert_mc.x = 664;			alert_mc.y = 384;			timeout.stop()			alert_mc.addEventListener("timeout", killall);						//killall();					}				private function moreTime(e:MouseEvent):void		{			this.removeEventListener(MouseEvent.MOUSE_DOWN, moreTime);			alert_mc.kill();			timeout.reset();			timeout.start();			//timeout.addEventListener(TimerEvent.TIMER_COMPLETE,timeoutHandler);					}				public override function reset():void{			killall(new Event("null"));		}		private function killall(e:Event):void{						timeout.stop();			timeout.reset();			timeout.removeEventListener(TimerEvent.TIMER_COMPLETE,_timeoutHandler);									var kids:Number = this.numChildren;			trace("timeout!! children:"+kids);			for(var i:Number = 1; i<= (kids-1);i++)			{				trace("I = "+i);				var target:DisplayObject = this.getChildAt(1);				trace("removing child "+target+target.name);				//target.kill();				removeChild(target);			}			timeout = null;			att();						}				}}