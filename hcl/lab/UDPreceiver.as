package com.nestor.hcl.lab  {		import flash.display.MovieClip;				import flash.net.*;	import flash.events.*;		public class UDPreceiver extends MovieClip{		var port;		var server;						private var datagramSocket:DatagramSocket = new DatagramSocket();				public function UDPreceiver(_server:String, _port:Number) 		{			server=_server;			port=_port;			initUDP();					}						public function initUDP():void		{			datagramSocket.addEventListener(DatagramSocketDataEvent.DATA, dataHandler);       		datagramSocket.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);      		datagramSocket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			       		datagramSocket.bind(port, server);			//datagramSocket.connect(server, port);			datagramSocket.receive();			trace("waiting for connection");		}						private function dataHandler(e:DatagramSocketDataEvent) : void {								var msg:String = e.data.readUTFBytes(e.data.length);				var cmd:Array = msg.split(";");								if(cmd[0]=="next")				{					dispatchEvent(new Event("nextSlide"));				}				else if(cmd[0]=="top")				{					dispatchEvent(new Event("firstSlide"));				}				if(cmd[0]=="suspend")				{					dispatchEvent(new Event("suspend"));				}				else if(cmd[0]=="resume")				{					dispatchEvent(new Event("resume"));				}				else trace(msg+" is an invalid command string");		}							private function IOErrorHandler(event:IOErrorEvent) : void {					trace(event);						}				private function securityErrorHandler(event:SecurityErrorEvent) : void {						trace(event);					}				public function playVid() {								}	}	}