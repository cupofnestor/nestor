package  com.nestor.hcl.quiz {	import flash.display.Sprite;	import flash.events.*;	import flash.display.Sprite;		public class qaList extends Sprite{		var quiz,cfg:XML;		var paginate:pagination;		var currentPage:Number;		var pages:Array;		public function qaList(_cfg,_quiz) {			// constructor code			pages = new Array();						quiz=_quiz;			cfg=_cfg;			this.addEventListener(Event.ADDED_TO_STAGE,init);			paginate=new pagination();									paginate.addEventListener(Event.CHANGE, flip);		}								private function init(e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE,init);											}				public function setup(){			//populate(currentRow);			buildPages();		}				public function buildPages()		{			for each (var r:XML in quiz.row)			{				var quizLength:uint = pages.push(buildPage(r));			}			//addPage(currentPage);			addChild(paginate);			trace("Paginate X/Y: "+cfg.paginate.@X+"/"+cfg.paginate.@Y);			paginate.x=cfg.paginate.@X;			paginate.y=cfg.paginate.@Y;			paginate.lastPage=pages.length-1;					}				public function buildPage(_r:XML):Array		{			var r:XML=_r;			var questions:Array=new Array();			for each (var q:String in r.questions.question)			{				if(Boolean(q))				{					var tmpQuiz:qa=new qa(cfg,q);					var largo:uint = questions.push(tmpQuiz);					//trace("Question: "+q);					questions[largo-1].id=largo-1;					//addChild(questions[largo-1]);					//questions[largo-1].addEventListener(FocusEvent.FOCUS_IN, editMode);				}			}			return questions;		}				private function addPage(i:Number):void		{			for each(var s:Sprite in pages[i])			{				addChild(s);				s.addEventListener(FocusEvent.FOCUS_IN, editMode);			}					}				private function removePage(i:Number):void		{						for each(var s:Sprite in pages[i])			{				removeChild(s);				s.removeEventListener(FocusEvent.FOCUS_IN, editMode);			}		}				/*public function populate(i:Number):void		{			var _q:XML=quiz.row[i];			for each (var q:String in _q.questions.question)			{				if(Boolean(q))				{					var tmpQuiz:qa=new qa(cfg,q);					var largo:uint = questions.push(tmpQuiz);					trace("Question: "+q);					questions[largo-1].id=largo-1;					addChild(questions[largo-1]);					questions[largo-1].addEventListener(FocusEvent.FOCUS_IN, editMode);				}			}		}*/				private function flip(e:Event):void		{			removePage(currentPage);			currentPage = paginate.currentPage;			addPage(currentPage);		}						private function editMode(e:Event):void{			var foc:Sprite = e.currentTarget as Sprite;			if (foc is qa){				foc.removeEventListener(FocusEvent.FOCUS_IN, editMode);				foc.addEventListener(FocusEvent.FOCUS_OUT, viewMode);								for each (var q:qa in pages[currentPage])				{					if (q == foc)					{						if (q._answer.text==q.def) q._answer.text="";						q.expand();						q.addEventListener("collapsed",blur);					}					else					{						q.hide();					}									}															}					}				private function blur(e:Event):void		{			stage.focus=null;						var foc:Sprite = e.currentTarget as Sprite;									for each (var q:qa in pages[currentPage])				{					if (q == foc){						q.addEventListener(FocusEvent.FOCUS_IN, editMode);					}					else q.show();				}					}				private function viewMode(e:Event){			var foc:Sprite = e.currentTarget as Sprite;									for each (var q:qa in pages[currentPage])				{					if (q == foc){						q.collapse(e);						q.addEventListener(FocusEvent.FOCUS_IN, editMode);					}					else q.show();				}		}	}	}