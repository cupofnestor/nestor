package com.nestor.hcl.slideshow  {		import flash.display.MovieClip;	import com.nestor.tools.cfgloader;	import flash.events.*;		import flash.display.*;	import flash.display.NativeWindow;		import com.nestor.hcl.*	import flash.html.HTMLLoader;    import flash.net.URLRequest;	import flash.display.Loader;	import com.nestor.hcl.slideshow.showList;			public class listtest extends MovieClip {		private var c:XML;		private var www,templates,bg,shows:String;		private var l:showList;		private var sshow:show;		private var btnType="crime_btn"		private var typeID:Number;		private var wide,high:Number;				public function listtest() {			// constructor code			var _c:cfgloader=new cfgloader('slideshow.cfg');			_c.addEventListener(Event.COMPLETE, setupShow);			//btnTest();					}								private function setupShow(e:Event):void		{			c=e.target.cfg;			www=c.net.www.toString();			templates=c.net.templates.toString();			bg=c.net.bg_img.toString();			typeID=Number(c.myTopic.@id);			initWindow();											}				private function initWindow() {				wide = Number(c.topics.topic.(@id == typeID).@W);				high = Number(c.topics.topic.(@id == typeID).@H);								stage.nativeWindow.width=wide;				stage.nativeWindow.height=high;			   				stage.nativeWindow.x=c.xoff;								trace("NativeWindow is :"+wide+" x "+high);				stage.displayState = toBool(c.fullscreen.toString()) ? StageDisplayState.FULL_SCREEN_INTERACTIVE : StageDisplayState.NORMAL;				stage.nativeWindow.alwaysInFront = toBool(c.fullscreen.toString());				stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;				setupBG();			        }				private function setupBG():void		{						var bgLdr:Loader=new Loader();						var bgUrl:String=www+templates+String(typeID)+"/"+bg;			trace("BG Image: "+bgUrl);			var bgReq:URLRequest=new URLRequest(bgUrl);			bgLdr.load(bgReq);			bgLdr.contentLoaderInfo.addEventListener(Event.COMPLETE, bgLoaded);									setupList();		}				private function bgLoaded(e:Event):void		{			var ld:Loader = e.target.loader;						this.addChildAt(ld,0);			var tl:* = this.getChildAt(0);			trace("aDdedd");					}				private function setupList():void		{						l = new showList(c);			l.addEventListener(MouseEvent.MOUSE_UP, clicked);			l.y=c.list.listitem.@padding;			addChild(l);					}				private function clicked(m:Event):void		{			trace("Adding Show:"+m.target.id+" :: "+m.target.showname);			var s:show=new show(c, Number(m.target.id));			addChild(s);			m.currentTarget.hide();			s.addEventListener(Event.COMPLETE, showOut);		}				private function showOut(e:Event):void		{			removeChild(e.target as show);			var goto:String = (l.oneShow) ? "attract" : "toList";			this[goto]();		}				private function attract():void		{			trace("attract");		}		private function toList():void		{			l.show();		}				private function toBool(val:*):Boolean		{			var ret:Boolean;			switch(val){				case "1":				case "true":				case "yes":					ret = true;					break;				case "0":				case "false":				case "no":					ret = false;					break;			}			return ret;		}	}	}