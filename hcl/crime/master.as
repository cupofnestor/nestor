//Crimepackage  com.nestor.hcl.crime {		import flash.display.MovieClip;	import flash.events.*;	import flash.utils.Timer;	import flash.net.*;	import flash.desktop.NativeProcess;	import flash.utils.ByteArray;	import com.nestor.tools.launcher;	import flash.ui.Mouse;	import flash.display.StageDisplayState;	import flash.display.Stage;		public class master extends MovieClip {		var suspended:Boolean=false;		var l:launcher;		var cfg:XML;		var cfgFile:String;		var url:URLRequest;		var cfgLoader:URLLoader = new URLLoader();		var timeline:Timer;		var UDP:DatagramSocket = new DatagramSocket();		var toggleMode:String;		var sec:Number=0;		var nextCue:ByteArray= new ByteArray();		var topCue:ByteArray= new ByteArray();		var udpHost:String;		var slave1:int;		var slave2:int;		var slave3:int;		var tickTock:String="";						public function master() {						var cue:String = "next;"+"\n"			nextCue.writeUTFBytes(cue);			var top:String = "top;"+"\n"			topCue.writeUTFBytes(top);						cfgFile="ss_conf.xml";			url=new URLRequest(cfgFile);			cfgLoader.load(url);			cfgLoader.addEventListener(Event.COMPLETE, cfgLoaded);					}				private function cfgLoaded(e:Event)		{			cfg = new XML(e.target.data);			l=new launcher(String(cfg.master.script));			if (cfg.dBug=="true") dBug.text+=" :: "+NativeProcess.isSupported;			udpHost = cfg.master.host;			slave1=int(cfg.slave1.port);			slave2=int(cfg.slave2.port);			slave3=int(cfg.slave3.port);						trace("UDPHOST: "+udpHost+"  Slaves: "+slave1+", "+slave2+", "+slave3);			toggleMode=cfg.master.remote.@string;											timeline=new Timer(5000,0);			timeline.start();			timeline.addEventListener(TimerEvent.TIMER, tick);			stage.nativeWindow.x=cfg.master.windowX;						stage.nativeWindow.x=0;  //-width of right screen.			this.addEventListener(KeyboardEvent.KEY_UP,keyHandler);			stage.focus = this;			if(cfg.full=="true"){								goFull();			}			top();		}				private function goFull():void		{			stage.nativeWindow.alwaysInFront = true;			stage.displayState=StageDisplayState.FULL_SCREEN_INTERACTIVE;			stage.nativeWindow.activate();			stage.nativeWindow.orderToBack();			stage.nativeWindow.orderToFront();			Mouse.hide();						if (cfg.dBug=="true") dBug.text+=" :: "+l.appPath;		}						private function keyHandler(k:KeyboardEvent):void		{			(k.altKey == true) ? adminKey(k.keyCode) : userKey(k.keyCode);					}						private function adminKey(k:Number) : void {			trace(k == 77) ? Mouse.show() : null;					}		private function userKey(k:Number) : void {						(k==32) ? suspend() : null;		}				private function resume(e:Event):void		{			goFull();			timeline.start();			l.removeEventListener("exited", resume);		}				private function suspend():void		{			trace("Suspending");			timeline.stop();									stage.nativeWindow.alwaysInFront = false;			stage.nativeWindow.orderToBack();			Mouse.show();						l.launch();			l.addEventListener("exited", resume);								}				private function tick(t:TimerEvent):void		{			sec=t.target.currentCount*5;			tickTock=("Tick: "+sec+"\r");			trace(tickTock);						switch(sec)			{								case 5:				this.play();								break;				case 30:				this.play();				//action				break;								case 35:				this.play();				//action				break;								case 40:				this.play();				//action				break;								case 45:				//action				break;								case 50:				gotoNext(slave1);				//action				break;								case 55:				gotoNext(slave1);				//action				break;								case 60:				//action				break;								case 65:				//action				break;								case 70:				//action				break;								case 75:				gotoNext(slave2);				//action				break;								case 80:				//action				break;								case 85:				//action				break;								case 90:				//action				break;								case 100:				//action				break;								case 105:				//action				break;								case 110:				//action				break;								case 115:				//action				break;												case 120:				//action				break;								case 125:				this.play();				gotoNext(slave2);				gotoNext(slave1);				//action				break;								case 130:				//action				break;								case 135:				//action				break;												case 140:				this.play();				//action				break;								case 145:				this.play();				gotoNext(slave1);				gotoNext(slave2);				//action				break;								case 150:				this.play();				gotoNext(slave2);				gotoNext(slave1);				//action				break;								case 155:				//action				break;								case 160:				//action				break;								case 165:				//action				break;								case 170:				//action				break;								case 175:				//action				break;								case 185:				gotoNext(slave1);				//action				break;								case 190:				//action				break;								case 195:				gotoNext(slave1);				//action				break;								case 200:				gotoNext(slave1);				//action				break;								case 205:				gotoNext(slave1);				//action				break;								case 210:				gotoNext(slave1);				//action				break;								case 215:				//action				break;												case 220:				gotoNext(slave1);				//action				break;								case 225:				//action				break;								case 230:				gotoNext(slave1);				//action				break;								case 235:				gotoNext(slave1);				//action				break;												case 240:				gotoNext(slave1);				//action				break;								case 245:				gotoNext(slave1);				//action				break;								case 250:				gotoNext(slave1);				//action				break;								case 255:				//action				break;								case 260:				//action				break;								case 265:				gotoNext(slave1);				//action				break;								case 270:				//action				break;								case 275:				gotoNext(slave1);				//action				break;								case 280:				gotoNext(slave1);				break;								case 285:				gotoNext(slave1);				//action				break;								case 290:				gotoNext(slave1);				//action				break;								case 295:				gotoNext(slave1);				//action				break;												case 300:				//action				break;								case 315:				gotoNext(slave1);				//action				break;								case 325:				this.play();				//action				break;								case 325:				this.play();				gotoNext(slave1);				gotoNext(slave2);				//action				break;								case 340:				top();								break;			}		}				private function gotoNext(port:Number)		{			UDP.send(nextCue,0,0,udpHost,port);		}				private function gotoTop(port:Number)		{			UDP.send(topCue,0,0,udpHost,port);		}				private function top():void{			this.gotoAndStop(1);			gotoTop(slave1);			gotoTop(slave2);			timeline.stop();			timeline.reset();			timeline.start();		}					}	}/*case 30:				//action				break;								case 35:				//action				break;								case 40:				//action				break;								case 45:				//action				break;								case 50:				//action				break;								case 55:				//action				break;								case 60:				//action				break;								case 65:				//action				break;								case 70:				//action				break;								case 75:				//action				break;								case 80:				//action				break;								case 85:				//action				break;								case 90:				//action				break;								case 100:				//action				break;								case 105:				//action				break;								case 110:				//action				break;								case 115:				//action				break;												case 120:				//action				break;								case 125:				//action				break;								case 130:				//action				break;								case 135:				//action				break;												case 140:				//action				break;								case 145:				//action				break;								case 150:				//action				break;								case 155:				//action				break;								case 160:				//action				break;								case 165:				//action				break;								case 170:				//action				break;								case 175:				//action				break;								case 185:				//action				break;								case 190:				//action				break;								case 195:				//action				break;								case 200:				//action				break;								case 200:				//action				break;								case 205:				//action				break;								case 210:				//action				break;								case 215:				//action				break;												case 220:				//action				break;								case 225:				//action				break;								case 230:				//action				break;								case 235:				//action				break;												case 240:				//action				break;								case 245:				//action				break;								case 250:				//action				break;								case 255:				//action				break;								case 260:				//action				break;								case 265:				//action				break;								case 270:				//action				break;								case 275:				//action				break;								case 285:				//action				break;								case 290:				//action				break;								case 295:				//action				break;												case 300:				//action				break;				*/