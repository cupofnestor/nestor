package com.nestor.hcl.cases {		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.*;	import caurina.transitions.*;	import flash.geom.Point;	import flash.display.DisplayObject;	import flash.filters.DropShadowFilter;		public class doc extends MovieClip {		var initX:Number;		var initY:Number;		var initW:Number;		var initH:Number;		var initRoZ:Number;		var initScaleX:Number;		var initScaleY:Number;		var largo:Number;		var server:String;		var stack:Array=new Array();		var center:Point;		var picCenter:Point=new Point();		var currentP:Number;		var focusPoint:Point = new Point(-300,24);		var focusSize:Number=650;				public function doc() {			addEventListener(Event.ADDED_TO_STAGE, setup);		}		public function setup(e:Event):void		{			initX=this.x;			initY=this.y;			initW=600;			initH=this.height;			initRoZ=this.rotation;			initScaleX =  this.scaleX;			initScaleY =  this.scaleY;		}				public function unloadStack() {			for(var i in stack)			{				removeChild(stack[i]);			}			stack = [];		}				function loadStack(_pictures:Array):void		{			var pictures:Array = _pictures;			largo = pictures.length;			for(var i in pictures)			{				////trace(i);				var myLoader:Loader = new Loader();				var Index:Number;				var priority:Number = 99-i;				var imageURL:String=pictures[i];				trace( imageURL)				var url:URLRequest=new URLRequest(imageURL);				myLoader.load(url);				myLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageInit,false,priority);			}				}						private function onImageInit(e:Event):void			{				var rox:Number=(Math.random()*30)-15;				var pic:Loader=new Loader();				var holder_mc:holder=new holder();				var Wide:Number;				var High:Number;				var biggestD:Number;				var scale:Number;				//trace("target : "+e.target);				pic=e.target.loader;				holder_mc.addChild(pic);			    pic.x=-pic.width/2;				var thisP:Number = stack.push(holder_mc)-1;				//trace("Last Pictuer="+thisP);				Wide=stack[thisP].width;				High=stack[thisP].height;				biggestD = Math.max(Wide,High);								scale=(initW/biggestD);				stack[thisP].initScale=scale;				stack[thisP].width=Wide*scale;				stack[thisP].height=High*scale;				//trace("frameWidth="+initW+" /  biggestD="+biggestD+"  Scale="+scale);				stack[thisP].rotation=rox;				stack[thisP].y=(Math.random()*10)*thisP;				var dropShadow:DropShadowFilter = new DropShadowFilter();				stack[thisP].filters=[dropShadow];				currentP=thisP;				addChild(stack[thisP]);												if (thisP!=(largo-1)) 				{					stack[thisP].visible=false;									}				else {					Tweener.addTween(stack[thisP], {rotation:0, scaleX:stack[thisP].scaleX*1.1,scaleY:stack[thisP].scaleY*1.1,  time:0.5});					dispatchEvent(new Event("readyToSwoop"));				}			}						public function activate():void			{				trace("activating");				if (stack.length > 1)				{					for (var i=0; i< this.numChildren; i++)					{						if(i==this.numChildren-1)this.getChildAt(i).addEventListener(MouseEvent.MOUSE_UP, flip);						this.getChildAt(i).visible=true;					}									}										}						public function deactivate():void			{				for(var i in stack)				{					if (i!=(largo-1)) 					{						stack[i].visible=false;					}					stack[i].removeEventListener(MouseEvent.MOUSE_UP, flip);				}						}									private function flip(e:MouseEvent):void			{				var thisP:Sprite=new Sprite();				thisP=Sprite(e.currentTarget);				trace("Current: "+thisP+"  Event Listener? "+thisP.hasEventListener(MouseEvent.MOUSE_UP));				thisP.removeEventListener(MouseEvent.MOUSE_UP,flip);				trace("REmovedFrom: "+thisP+"  Event Listener? "+thisP.hasEventListener(MouseEvent.MOUSE_UP));				var topnum:Number = getChildIndex(thisP);				Tweener.addTween(this.getChildAt(topnum-1), {rotation:0,  time:0.5});												this.getChildAt(topnum-1).addEventListener(MouseEvent.MOUSE_UP, flip);								var returnTo:Number=thisP.x;				var off:Number=(thisP.x-initW)-100;				Tweener.addTween(thisP, {x:off, time:0.5, onComplete:gotoBottom, onCompleteParams:[thisP,returnTo], transition:"easeOutSine"});				//trace();			}						private function gotoBottom(t:holder, n:Number):void			{				var rox:Number=(Math.random()*30)-15;												this.setChildIndex(t, 1);				Tweener.addTween(t, {x:n,rotation:rox, time:0.5,transition:"easeInSine"});																	 			}						public function focus():void			{				var targetX:Number=focusPoint.x;				var targetY:Number=focusPoint.y;								Tweener.addTween(this, {x:targetX,  y:targetY,  scaleX:1.13,  scaleY:1.13, time:1, rotation:0})				activate();			}						public function blur():void			{				var targetX:Number=focusPoint.x;				var targetY:Number=focusPoint.y;								Tweener.addTween(this, {x:initX,  y:initY,  scaleX:initScaleX,  scaleY:initScaleY, time:1, rotation:initRoZ})				deactivate();			}			}	}