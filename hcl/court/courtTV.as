package{		import flash.display.MovieClip;	import flash.events.*;	import flash.net.*;	import flash.display.Loader;	import flash.display.NativeWindow;	import flash.display.NativeWindowDisplayState;	import flash.display.StageDisplayState;	import flash.utils.Timer;	include "includes/quickfix_imports.as";	public class courtTV extends MovieClip	{			var cfg:XML;		var imageLoader:Loader = new Loader();		var sender_mc:sender;		var vidID:String;		var vidLength:String;				public function courtTV()		{						var cfgLoader:URLLoader = new URLLoader();			cfgLoader.addEventListener(Event.COMPLETE, cfgLoaded);			cfgLoader.load(new URLRequest("courtTV_conf.xml"));			focus.opacity(0);			focus.addChildAt(imageLoader, 0);			focus.play_mc.addEventListener(MouseEvent.MOUSE_UP, playVid);			focus.play_mc.mouseEnabled=false;			book_mc.addEventListener(book.PAGE_CHANGED, updateControl);					}						function cfgLoaded(e:Event):void		{   			cfg=new XML(e.target.data);  			trace(cfg);			var PHPgateway:String="http://"+cfg.net.host+":"+cfg.net.amfphp.port+cfg.net.amfphp.gateway			var myLoader:MovieClip = new amfPHPLoader(PHPgateway);			trace(PHPgateway);			myLoader.goGet("courtTV.getList");			myLoader.addEventListener(Event.COMPLETE, loadDone);			sender_mc=new sender(cfg.net.udp.host,int(cfg.net.udp.port));			stage.nativeWindow.x=-cfg.window.screen1.width;  //-width of right screen.			include "includes/quickfix.as";		}						private function loadDone(e:Event):void		{			trace(e.target.d[0]);			book_mc.host = cfg.net.host;			book_mc.path = cfg.net.path;						book_mc.init(e.target.d);			book_mc.addEventListener("listClicked", listHandler);			control_mc.addEventListener("wheel", wheelHandler);			control_mc.addEventListener("flip", flipHandler);			control_mc.addEventListener("abort", abortHandler);						control_mc.pageOf.text=(book_mc.lastP+1).toString();		}				private function listHandler(e:Event):void		{			var newDesc:String;			var newTitle:String;			var swap:Function = function swap(e:Event):void				{					imageLoader.load(imageReq);										focus.removeEventListener("doneOpacityChange", swap);					focus.descText.text=newDesc;					focus.labelText.text=newTitle;					focus.opacity(1);					if(focus.play_mc.alpha == 0)focus.play_mc.opacity(1);					focus.play_mc.mouseEnabled=true;				}			focus.play_mc.mouseEnabled=false;			if(title_mc.alpha != 0) title_mc.opacity(0);						vidID=String(e.target.clipId - 1);			newDesc=e.target.desc;			newTitle=e.target.clipTitle;			vidLength=e.target.largo;						trace("xlicke"+e.target.clipTitle);			focus.addEventListener("doneOpacityChange", swap);						focus.opacity(0);						var imageReq:URLRequest=new URLRequest(e.target.image);			trace(imageReq);								}		private function playVid(e:MouseEvent):void		{			trace("Mouse PlayVid");			focus.play_mc.opacity(0);			focus.play_mc.mouseEnabled=false;			var cmd:String="play"+";"+vidID			sender_mc.sendCmd(cmd);						startTimer(vidLength);					}						function startTimer(_largo:String):void		{			var minSec:Array = _largo.split(":");			var min:Number = int(minSec[0]);			var sec:Number = int(minSec[1]);			var millis:Number=(min*60000)+(sec*1000);			var vidTimer:Timer = new Timer(millis,1);			vidTimer.addEventListener(TimerEvent.TIMER_COMPLETE, resetFocus);			vidTimer.start();			trace("Timer Started");					}				function resetFocus(t:TimerEvent):void		{			trace("Timer Tripeped");			t.target.removeEventListener(TimerEvent.TIMER_COMPLETE,resetFocus);			t.target.stop();			title_mc.opacity(1);			focus.opacity(0);		}							private function wheelHandler(e:Event):void		{			book_mc.pages.x+=e.target.changeX;		}				private function flipHandler(e:Event):void		{						if(e.target.changeX>0)			{				trace("previous");							   book_mc.prevP();			   book_mc.addEventListener(book.PAGE_CHANGED, updateControl);			}			else if (e.target.changeX<0){				trace("next");								book_mc.nextP();				book_mc.addEventListener(book.PAGE_CHANGED, updateControl);			}					}				function updateControl(e:Event):void		{			book_mc.removeEventListener(book.PAGE_CHANGED, updateControl);			trace("Changing Control.pageNo");			control_mc.changePage(e.target.currentP+1);		}				private function abortHandler(e:Event):void		{			book_mc.sameP();		}									}	}